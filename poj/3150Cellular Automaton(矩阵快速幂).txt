#include<cstdio>   //这道鸟题一看就知道肯定是矩阵快速幂。。。但发现矩阵太大了。。N^3肯定超时。。。所以就要优化一下哈。。
#include<climits>   //方法见下。。。
#include<algorithm>
#include<cstring>
#include<queue>
#include<cstdlib>
#include<cmath>
#include<stack>
#include<map>
#include<vector>
#define abs(a)  ((a)>0?(a):(-(a)))
#define MAX(a,b) ((a)>(b)?(a):(b))
#define MIN(a,b) ((a)<(b)?(a):(b))
#define INF 1000000000000LL
#define lowbit(a) (a)^(-(a))
using namespace std;
struct matrix
{
    long long digit[510];
    matrix(){memset(digit,0,sizeof(digit));}
};
int N,dis,k;
long long mod;
matrix res;
matrix m_time(const matrix &a,const matrix &b)
{
    matrix ans;
    for(int m=1;m<=N;m++)
    {
        for(int k=1;k<m;k++)
        {
            ans.digit[m]+=a.digit[k]*b.digit[m-k+1];
            ans.digit[m]%=mod;
        }
        for(int k=m;k<=N;k++)
        {
            ans.digit[m]+=a.digit[k]*b.digit[k-m+1];
            ans.digit[m]%=mod;
        }
    }
    return ans;
}
matrix m_pow(matrix a,int n)
{
    matrix ans=a;
    n--;
    while(n)
    {
        if(n%2)
        {
            ans=m_time(ans,a);
        }
        a=m_time(a,a);
        n/=2;
    }
    return ans;
}
int main(void)
{
    while(4==scanf("%d%I64d%d%d",&N,&mod,&dis,&k))
    {
        matrix A;
        for(int i=1;i<=N;i++)
        {
            if(MIN(abs(i-1),abs(N-i+1))<=dis)A.digit[i]=1;
        }
        //for(int i=1;i<=N;i++)printf("%I64d ",A.digit[i]);printf("\n");
        for(int i=1;i<=N;i++)
        {
            scanf("%I64d",&res.digit[i]);
        }
        A=m_pow(A,k);
        //for(int i=1;i<=N;i++)printf("%I64d ",A.digit[i]);printf("\n");
        //printf("pass\n");
        res=m_time(res,A);
        for(int i=1;i<=N;i++)
        {
            printf("%I64d%c",res.digit[i],(i==N)?'\n':' ');
        }
    }
    return 0;

}
对一个NxN矩阵求k次方，而且这个k很大，N也不小，怎么办？
所以有高手观察到了，这个矩阵长得有点特殊，可以找到一些规律：
b^1 =
[1, 1, 0, 0, 1]
[1, 1, 1, 0, 0]
[0, 1, 1, 1, 0]
[0, 0, 1, 1, 1]
[1, 0, 0, 1, 1]
b^2 =
[3, 2, 1, 1, 2]
[2, 3, 2, 1, 1]
[1, 2, 3, 2, 1]
[1, 1, 2, 3, 2]
[2, 1, 1, 2, 3]
b^3 =
[7, 6, 4, 4, 6]
[6, 7, 6, 4, 4]
[4, 6, 7, 6, 4]
[4, 4, 6, 7, 6]
[6, 4, 4, 6, 7]
b^4 =
[19, 17, 14, 14, 17]
[17, 19, 17, 14, 14]
[14, 17, 19, 17, 14]
[14, 14, 17, 19, 17]
[17, 14, 14, 17, 19]

发现神马没有。就是无论是b的几次幂，都符合A[i][j] = A[i-1][j-1]
高手说是这样推倒出来地：
““”
利用矩阵A，B具有a[i][j]=A[i-1][j-1],B[i][j]=B[i-1][j-1]（i-1<0则表示i-1+n,j-1<0则表示j-1+n）
我们可以得出矩阵C=a*b也具有这个性质
C[i][j]=sum(A[i][t]*B[t][j])=sum(A[i-1][t-1],B[t-1][j-1])=sum(A[i-1][t],B[t][j-1])=C[i-1][j-1] 
“”“