#include <iostream>   //再战splay....
#include <cstdio>           //这题基本是splay操作大锦集。。。各种乱七八糟的操作来维护序列。。感觉十分强大。。
#include <cstring>
#include <algorithm>
#include <queue>
#include <climits>
#include <ctime>
#include <cmath>
#define MAX(a,b) ((a)>(b)?(a):(b))
#define MIN(a,b) ((a)<(b)?(a):(b))
#define abs(x) (x)>0?(x):(-(x))
#define FOR(i,a,b) for(int i = (a);i<=(b);i++)
#define FORD(i,a,b) for(int i = (a);i>=(b);i--)
#define REP(i,n) for(int i = 0;i<(n);i++)
#define rst(x,k) memset(x,k,sizeof(x))
#define lson (ind<<1)
#define rson (ind<<1|1)
#define maxn 200010
#define INF 0x7FFFFFFF
using namespace std;
typedef long long LL;
int pool[maxn],top,tot;         //分配节点的节点池..
int n,data[maxn];;
struct spl
{
    int root;
    int son[maxn][2],fa[maxn];
    int s[maxn],key[maxn],minr[maxn];
    int add[maxn];
    bool lazy[maxn];
    void update(int x)
    {
        s[x] = 1 + s[son[x][0]] + s[son[x][1]];
        minr[x] = MIN(minr[son[x][0]],minr[son[x][1]]);
        minr[x] = MIN(minr[x],key[x]);
    }
    void pushdown(int x)
    {
        int l = son[x][0];
        int r = son[x][1];
        if(add[x])
        {
            if(l)
            {
                add[l] += add[x];
                key[l] += add[x];
                minr[l] += add[x];
            }
            if(r)
            {
                add[r] += add[x];
                key[r] += add[x];
                minr[r] += add[x];
            }
            add[x] = 0;
        }
        if(lazy[x])
        {
            lazy[son[x][0]] ^= 1;
            lazy[son[x][1]] ^= 1;
            swap(son[x][0],son[x][1]);
            lazy[x] = false;
        }
    }
    void getnew(int &x,int _key,int _fa)
    {
        if(top)
            x = pool[--top];
        else
            x = ++tot;
        son[x][0] = son[x][1] = add[x] = 0;
        fa[x] = _fa;
        key[x] = minr[x] = _key;
        s[x] = 1;
        lazy[x] = false;
    }
    void build(int &x,int l,int r,int _fa)
    {
        if(l<=r)
        {
            int mid = (l+r)>>1;
            getnew(x,data[mid],_fa);
            build(son[x][0],l,mid-1,x);
            build(son[x][1],mid+1,r,x);
            update(x);
        }
    }
    void INIT(int n)
    {
        lazy[0] = false;
        root = tot = top = 0;
        son[0][0] = son[0][1] = fa[0] = s[0] = add[0] = 0;
        key[0] = minr[0] = INF;
        getnew(root,INF,0);
        getnew(son[root][1],INF,root);
        s[root]++;
        build(son[son[root][1]][0],1,n,son[root][1]);
        update(son[root][1]);
        update(root);
    }
    void rolate(int x,int kind)      //0代表左旋 ..1代表右旋..已经不想写注释了。。
    {
        int y = fa[x];
        int z = fa[y];
        pushdown(y);
        pushdown(x);
        son[y][!kind] = son[x][kind];
        fa[son[x][kind]] = y;
        son[x][kind] = y;
        fa[x] = z;
        son[z][son[z][1] == y] = x;
        fa[y] = x;
        update(y);
        update(x);
    }
    void splay(int x,int aim)
    {
        if(x != aim)
        {
            pushdown(x);
            while(fa[x] != aim)
            {
                if(son[fa[x]][0] == x)
                    rolate(x,1);
                else
                    rolate(x,0);
            }
            update(x);
            if(!aim)
                root = x;
        }
    }
    int FINDK(int k)
    {
        int x = root;
        pushdown(root);
        while(s[son[x][0]]+1 != k)
        {
            if(s[son[x][0]]+1 < k)
            {
                k -= (s[son[x][0]]+1);
                x = son[x][1];
            }
            else
                x = son[x][0];
            pushdown(x);
        }
        return x;
    }
    void ADD(int x,int y,int kkk)
    {
        x = FINDK(x-1);
        y = FINDK(y+1);
        splay(x,0);
        splay(y,x);
        int c = son[y][0];
        add[c] += kkk;
        key[c] += kkk;
        minr[c] += kkk;
        update(y);
        update(x);
    }
    void Reverse(int x,int y)
    {
        x = FINDK(x-1);
        y = FINDK(y+1);
        splay(x,0);
        splay(y,x);
        lazy[son[y][0]] ^= 1;
    }
    void Revolve(int x,int y,int ttt)
    {
        int ssssize = (y-x+1);
        ttt %= ssssize;
        if(ttt<0) ttt += ssssize;
        if(ttt)
        {
            Reverse(x,y-ttt);
            Reverse(y-ttt+1,y);
            Reverse(x,y);
        }
    }
    void Insert(int x,int _key)
    {
        int a = FINDK(x);
        int b = FINDK(x+1);
        splay(a,0);
        splay(b,a);
        getnew(son[b][0],_key,b);
        update(b);
        update(a);
    }
    void Delete(int x)
    {
        int a = FINDK(x-1);
        int b = FINDK(x+1);
        splay(a,0);
        splay(b,a);
        int c = son[b][0];
        pool[top] = c; top++;
        son[b][0] = 0;
        update(b);
        update(a);
    }
    int solve(int x,int y)
    {
        x = FINDK(x-1);
        y = FINDK(y+1);
        splay(x,0);
        splay(y,x);
        return minr[son[y][0]];
    }
}splaytree;


int main(void)
{
    while(EOF != scanf("%d",&n))
    {
        FOR(i,1,n) scanf("%d",data+i);
        splaytree.INIT(n);
        int Q; scanf("%d",&Q);
        while(Q--)
        {
            char op[10];
            int x;
            scanf("%s%d",op,&x);
            if(op[0] == 'A')
            {
                int y,D; scanf("%d%d",&y,&D);
                splaytree.ADD(x+1,y+1,D);
            }
            else if(op[0] == 'I')
            {
                int _key; scanf("%d",&_key);
                splaytree.Insert(x+1,_key);
            }
            else if(op[0] == 'D')
            {
                splaytree.Delete(x+1);
            }
            else if(op[0] == 'M')
            {
                int y; scanf("%d",&y);
                printf("%d\n",splaytree.solve(x+1,y+1));
            }
            else if(op[3] == 'E')
            {
                int y; scanf("%d",&y);
                splaytree.Reverse(x+1,y+1);
            }
            else
            {
                int y,ttt; scanf("%d%d",&y,&ttt);
                splaytree.Revolve(x+1,y+1,ttt);
            }
        }
    }
    return 0;
}
