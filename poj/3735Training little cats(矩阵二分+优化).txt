#include<cstdio>     //这题难点不在矩阵上面。。而是如何转换成。。下面的解析和我的具体做法有点小出入。。顺便练习一下重载操作符。。
#include<climits>
#include<algorithm>
#include<cstring>
#include<queue>
#include<cstdlib>
#include<cmath>
#include<stack>
#include<map>
#include<vector>
#define abs(a)  ((a)>0?(a):(-(a)))
#define MAX(a,b) ((a)>(b)?(a):(b))
#define MIN(a,b) ((a)<(b)?(a):(b))
#define INF -0x0f0f0f0f
#define lowbit(a) (a)^(-(a))
using namespace std;
typedef long long LL;
struct matrix
{
    LL digit[110][110];
    matrix(){memset(digit,0,sizeof(digit));}
};
int N,M,K;
matrix operator * (matrix &a,matrix &b)
{
    matrix ans;
    for(int i=0;i<=N;i++)
    {
        for(int j=0;j<=N;j++)
        {
            if(a.digit[i][j])
            {
                for(int k=0;k<=N;k++)
                {
                    ans.digit[i][k]+=a.digit[i][j]*b.digit[j][k];
                }
            }
        }
    }
    return ans;
}
matrix operator ^ (matrix a,int n)
{
    if(0==n)
    {
        matrix kong;
        return kong;
    }
    matrix ans=a;
    n--;
    while(n)
    {
        if(n&1)
        {
            ans=ans*a;
        }
        a=a*a;
        n>>=1;
    }
    return ans;
}
int main(void)
{
    while(3==scanf("%d%d%d",&N,&M,&K) && (N || M || K))
    {
        matrix A;
        for(int i=0;i<=N;i++)
            A.digit[i][i]=1;
        for(int t=1;t<=K;t++)
        {
            char op[10];
            scanf("%s",op);
            if('g'==op[0])
            {
                int x; scanf("%d",&x);
                A.digit[x-1][N]++;
            }
            else if('e'==op[0])
            {
                int x;scanf("%d",&x);
                for(int i=0;i<=N;i++)
                    A.digit[x-1][i]=0;
            }
            else
            {
                int x,y; scanf("%d%d",&x,&y);
                for(int i=0;i<=N;i++)
                {
                    swap(A.digit[x-1][i],A.digit[y-1][i]);
                }
            }
        }
        A = A ^ M;
        LL ans[110]; memset(ans,0,sizeof(ans));
        for(int i=0;i<N;i++)
        {
            ans[i]=A.digit[i][N];
        }
        for(int i=0;i<N;i++)
        {
            printf("%I64d%c",ans[i],i==N-1?'\n':' ');
        }
    }
    return 0;
}
m达到10^9，显然不能直接算。
              因为k个操作给出之后就是固定的，所以想到用矩阵，矩阵快速幂可以把时间复杂度降到O（logm）。问题转化为如何构造转置矩阵？
              说下我的思路，观察以上三种操作，发现第二，三种操作比较容易处理，重点落在第一种操作上。
              有一个很好的办法就是添加一个辅助，使初始矩阵变为一个n+1元组，编号为0到n，下面以3个猫为例：
              定义初始矩阵A = [1 0 0 0]，0号元素固定为1，1~n分别为对应的猫所拥有的花生数。
              对于第一种操作g i，我们在单位矩阵基础上使Mat[0][i]变为1，例如g 1：
              1 1 0 0
              0 1 0 0
              0 0 1 0
              0 0 0 1，显然[1 0 0 0]*Mat = [1 1 0 0]
              对于第二种操作e i，我们在单位矩阵基础使Mat[i][i] = 0,例如e 2：
              1 0 0 0
              0 1 0 0
              0 0 0 0
              0 0 0 1, 显然[1 2 3 4]*Mat = [1 2 0 4]
              对于第三种操作s i j，我们在单位矩阵基础上使第i列与第j互换，例如s 1 2：
              1 0 0 0
              0 0 0 1
              0 0 1 0
              0 1 0 0，显然[1 2 0 4]*Mat = [1 4 0 2]
              现在，对于每一个操作我们都可以得到一个转置矩阵，把k个操作的矩阵相乘我们可以得到一个新的转置矩阵T。
              A * T 表示我们经过一组操作，类似我们可以得到经过m组操作的矩阵为 A * T ^ m,最终矩阵的[0][1~n]即为答案。

              上述的做法比较直观，但是实现过于麻烦，因为要构造k个不同矩阵。

              有没有别的方法可以直接构造转置矩阵T？答案是肯定的。
              我们还是以单位矩阵为基础：
              对于第一种操作g i，我们使Mat[0][i] = Mat[0][i] + 1；
              对于第二种操作e i，我们使矩阵的第i列清零；
              对于第三种操作s i j，我们使第i列与第j列互换。
              这样实现的话，我们始终在处理一个矩阵，免去构造k个矩阵的麻烦。

              至此，构造转置矩阵T就完成了，接下来只需用矩阵快速幂求出 A * T ^ m即可，还有一个注意的地方，该题需要用到long long。……