#include <vector>   //这道题目蛋疼的要死。。但是还是调试出来了。。注意。。重边全都不要。。否则会造成错误答案。。思路见下
#include <queue>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#define INF 999999999.0
#define eps 1e-11
#define MAX(a,b) ((a)>(b)?(a):(b))
#define abs(a) ((a)>0?(a):(-(a)))
using namespace std;
vector<int> puzzle[30];
int connect[5][5];
int cnt[10];
void INIT(void)
{
    for(int i=1;i<=9;i++)
        puzzle[i].clear();
    memset(cnt,0,sizeof(cnt));
}
bool toposort(void)
{
    queue<int>q;
    int tot=0;
    for(int i=1;i<=9;i++)
    {
        if(0==cnt[i])
        {
            q.push(i);
            tot++;
        }
    }
    while(!q.empty())
    {
        int start=q.front();
        q.pop();
        int n=puzzle[start].size();
        for(int i=0;i<n;i++)
        {
            int tmpt=puzzle[start][i];
            cnt[tmpt]--;
            if(0==cnt[tmpt])
            {
                q.push(tmpt);
                tot++;
            }
        }
    }
    if(tot==9)
        return true;
    return false;
}
int main(void)
{
    char op[15];
    while(EOF!=scanf("%s",op))
    {
        if(0==strcmp(op,"ENDOFINPUT"))
            break;
        INIT();
        for(int i=1;i<=4;i++)
        {
            for(int j=1;j<=4;j++)
                scanf("%d",&connect[i][j]);
        }
        scanf("%s",op);
        int now;
        //int round=0;
        for(int i=1;i<=3;i++)
        for(int j=1;j<=3;j++)
        {
            //printf("passround%d\n",++round);
            now=(i-1)*3+j;
            int a=-1,b=-1,c=-1;
            if(connect[i][j]!=now)
            {
                puzzle[now].push_back(connect[i][j]);
                cnt[connect[i][j]]++;
                a=connect[i][j];
            }
            if(connect[i][j+1]!=now)
            {

                if(connect[i][j+1]!=a)
                {
                    puzzle[now].push_back(connect[i][j+1]);
                    cnt[connect[i][j+1]]++;
                }
                b=connect[i][j+1];
            }
            if(connect[i+1][j]!=now)
            {
                if(connect[i+1][j]!=a && connect[i+1][j]!=b)
                {
                    puzzle[now].push_back(connect[i+1][j]);
                    cnt[connect[i+1][j]]++;
                }
                c=connect[i+1][j];
            }
            if(connect[i+1][j+1]!=now)
            {
                //printf("aslfjsd\n");
                //printf("connect is %d  \n",connect[i+1][j+1]);
                //printf("now is %d\n",now);

                if(connect[i+1][j+1]!=a && connect[i+1][j+1]!=b && connect[i+1][j+1]!=c)
                {
                    puzzle[now].push_back(connect[i+1][j+1]);
                    cnt[connect[i+1][j+1]]++;
                }
            }
        }
        //printf("pass1\n");
        bool ok=toposort();
        if(ok)
        {
            printf("THESE WINDOWS ARE CLEAN\n");
        }
        else
        {
            printf("THESE WINDOWS ARE BROKEN\n");
        }
    }
    return 0;
}
在第i个数字出现的2x2矩阵中扫描出现的数字，这四个数字是否等于i
                   如果不等于i,说明这个数字肯定在i之后出现
                   先出现的数字为边的起点，后面出现的数字为边的终点构成有向边
                   以此类推最终构成有向图
                   数字的出现有先后之分，所以边的遍历只能从起点走向终点
                   起点必须比终点先走，因为这个数字先出现
                   如果走的顶点的顺序有冲突，再次回到走过的点，就不满足题意
                   也就是在这个图里能不能找到有向环?
                   AOV网络中如果出现了有向回路，则意味着某项活动以自己作为先决条件，这是不对的！
                   可以用拓扑排序来找到有向环