#include <iostream>   //我是沙茶....今天又写搓了。。
#include <cstdio>     //线段树区间修改。。。一道不错的题目。。区间翻转和覆盖要区分开来。。如果区间发生了覆盖。那么也要把翻转标记清掉。。
#include <cstring>    //注意集合的开闭区间可以用数字乘以二来解决。。奇数就是开区间。。
#include <algorithm>
#include <queue>
#include <stack>
#include <climits>
#include <ctime>
#include <cmath>
#include <set>
#include <map>
#include <string>
#define MAX(a,b) ((a)>(b)?(a):(b))
#define MIN(a,b) ((a)<(b)?(a):(b))
#define abs(x) ((x)>0?(x):(-(x)))
#define FOR(i,a,b) for(int i = (a);i<=(b);i++)
#define FORD(i,a,b) for(int i = (a);i>=(b);i--)
#define REP(i,n) for(int i = 0;i<(n);i++)
#define rst(x,k) memset(x,k,sizeof(x))
#define lowbit(x) ((x)&(-(x)))
#define h(x) (1<<(x))
#define lson (ind<<1)
#define rson (ind<<1|1)
#define eps 1e-6
#define INF 1400000000
#define maxn 131080
#define mod 1000000007LL
#define fr first
#define se second
using namespace std;
typedef long long LL;
bool visit[maxn+100];
struct node{
    bool lazy[maxn<<2];
    int cover[maxn<<2];
    void INIT(void){
        rst(lazy,false);
        rst(cover,0);
    }
    void dorev(int ind){
        if(cover[ind] != -1){
            cover[ind] ^= 1;
            lazy[ind] = false;
        }
        else lazy[ind] ^= 1;
    }
    inline void pushdown(int ind){
        if(cover[ind] != -1){
            cover[lson] = cover[rson] = cover[ind];
            lazy[lson] = lazy[rson] = lazy[ind] = 0;
            cover[ind] = -1;
        }else if(lazy[ind]){
            dorev(lson);
            dorev(rson);
            lazy[ind] = false;
        }
    }
    void change(int Ql,int Qr,int _val,int l,int r,int ind){
        if(Ql <= l && r <= Qr){
            lazy[ind] = false;
            cover[ind] = _val;
            return;
        }
        int mid = (l+r)>>1;
        pushdown(ind);
        if(Qr > mid)change(Ql,Qr,_val,mid+1,r,rson);
        if(Ql <= mid)change(Ql,Qr,_val,l,mid,lson);
    }
    void rev(int Ql,int Qr,int l,int r,int ind){
        if(Ql <= l && r <= Qr){
            dorev(ind);
            return;
        }
        int mid = (l+r)>>1;
        pushdown(ind);
        if(Qr > mid)rev(Ql,Qr,mid+1,r,rson);
        if(Ql <= mid)rev(Ql,Qr,l,mid,lson);
    }
    void req(int l,int r,int ind){
        if(cover[ind] == 1){
            FOR(i,l,r)visit[i] = true;
            return;
        }else if(cover[ind] == -1 && (l < r)){
            pushdown(ind);
            int mid = (l+r)>>1;
            req(l,mid,lson);
            req(mid+1,r,rson);
        }
    }
}seg_tree;
int main(void){
    seg_tree.INIT();
    char ls,rs;
    char op[10];
    int x,y;
    rst(visit,false);
    while(~scanf("%s %c%d,%d%c",op,&ls,&x,&y,&rs)){
        x <<= 1; y <<= 1;
        if(ls == '(')x++;
        if(rs == ')')y--;
        if(x > y)continue;
        if(op[0] == 'U') seg_tree.change(x,y,1,0,maxn,1);
        if(op[0] == 'I'){
            if(x > 0)seg_tree.change(0,x-1,0,0,maxn,1);
            if(y < maxn) seg_tree.change(y+1,maxn,0,0,maxn,1);
        }
        if(op[0] == 'D') seg_tree.change(x,y,0,0,maxn,1);
        if(op[0] == 'C'){
            if(x > 0)seg_tree.change(0,x-1,0,0,maxn,1);
            if(y < maxn) seg_tree.change(y+1,maxn,0,0,maxn,1);
            seg_tree.rev(x,y,0,maxn,1);
        }
        if(op[0] == 'S') seg_tree.rev(x,y,0,maxn,1);
    }
    seg_tree.req(0,maxn,1);
    bool space = false;
    FOR(i,0,maxn){
        if(visit[i]){
            x = i;
            y = i;
            while(visit[i+1]){
                y++;
                i++;
            }
            if(space)putchar(' ');
            else space = true;
            printf("%c%d,%d%c",(x%2 == 1)?'(':'[',x/2,(y+1)/2,(y%2 == 1)?')':']');
        }
    }
    if(space)puts("");
    else printf("empty set\n");
    return 0;
}
