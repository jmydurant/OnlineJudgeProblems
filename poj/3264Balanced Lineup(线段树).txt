#include <iostream>   //我是沙茶....今天又写搓了。。
#include <cstdio>     //沙茶裸题。。。
#include <cstring>
#include <algorithm>
#include <queue>
#include <climits>
#include <ctime>
#include <cmath>
#include <set>
#include <map>
#include <string>
#define MAX(a,b) ((a)>(b)?(a):(b))
#define MIN(a,b) ((a)<(b)?(a):(b))
#define abs(x) ((x)>0?(x):(-(x)))
#define FOR(i,a,b) for(int i = (a);i<=(b);i++)
#define FORD(i,a,b) for(int i = (a);i>=(b);i--)
#define REP(i,n) for(int i = 0;i<(n);i++)
#define rst(x,k) memset(x,k,sizeof(x))
#define lowbit(x) ((x)&(-(x)))
#define h(x) (1<<(x))
#define lson (ind<<1)
#define rson (ind<<1|1)
#define eps 1e-6
#define INF 1000000000
#define maxn 51000
#define mod 1000000007LL
using namespace std;
typedef long long LL;
int a[maxn];
struct node{
    int maxr[maxn<<2],minr[maxn<<2];
    void build(int l,int r,int ind){
        if(l == r){
            maxr[ind] = minr[ind] = a[l];
            return;
        }
        int mid = (l+r)>>1;
        build(l,mid,lson);
        build(mid+1,r,rson);
        maxr[ind] = MAX(maxr[lson],maxr[rson]);
        minr[ind] = MIN(minr[lson],minr[rson]);
    }
    int reqmax(int l,int r,int Ql,int Qr,int ind){
        if(Ql <= l && r <= Qr)return maxr[ind];
        int mid = (l+r)>>1;
        if(Qr <= mid)return reqmax(l,mid,Ql,Qr,lson);
        else if(Ql > mid)return reqmax(mid+1,r,Ql,Qr,rson);
        else{
            int s1 = reqmax(l,mid,Ql,mid,lson);
            int s2 = reqmax(mid+1,r,mid+1,Qr,rson);
            return MAX(s1,s2);
        }
    }
    int reqmin(int l,int r,int Ql,int Qr,int ind){
        if(Ql <= l && r <= Qr)return minr[ind];
        int mid = (l+r)>>1;
        if(Qr <= mid)return reqmin(l,mid,Ql,Qr,lson);
        else if(Ql > mid)return reqmin(mid+1,r,Ql,Qr,rson);
        else{
            int s1 = reqmin(l,mid,Ql,mid,lson);
            int s2 = reqmin(mid+1,r,mid+1,Qr,rson);
            return MIN(s1,s2);
        }
    }
}seg_tree;
int main(void){
    int n,Q;
    while(2 == scanf("%d%d",&n,&Q)){
        FOR(i,1,n) scanf("%d",a+i);
        seg_tree.build(1,n,1);
        while(Q--){
            int x,y; scanf("%d%d",&x,&y);
            int m1 = seg_tree.reqmax(1,n,x,y,1);
            int m2 = seg_tree.reqmin(1,n,x,y,1);
            printf("%d\n",m1 - m2);
        }
    }return 0;
}
