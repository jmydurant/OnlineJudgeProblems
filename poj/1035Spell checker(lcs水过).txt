#include <iostream>   //我是沙茶....今天又写搓了。。
#include <cstdio>      //用了几个比较大的剪枝才过。。弱逼啊。。。无地自容。。老实的去写字典树能死啊。。
#include <cstring>
#include <algorithm>
#include <queue>
#include <stack>
#include <climits>
#include <ctime>
#include <cmath>
#include <set>
#include <map>
#include <string>
#include <vector>
#define MAX(a,b) ((a)>(b)?(a):(b))
#define MIN(a,b) ((a)<(b)?(a):(b))
#define abs(x) ((x)>0?(x):(-(x)))
#define FOR(i,a,b) for(int i = (a);i<=(b);i++)
#define FORD(i,a,b) for(int i = (a);i>=(b);i--)
#define REP(i,n) for(int i = 0;i<(n);i++)
#define rst(x,k) memset(x,k,sizeof(x))
#define lowbit(x) ((x)&(-(x)))
#define h(x) (1<<(x))
#define lson (ind<<1)
#define rson (ind<<1|1)
#define eps 1e-6
#define INF 1400000000
#define maxn 101010
//#define mod 1000000007LL
#define fr first
#define se second
#define Pi acos(-1.0)
//#define link fjksldfjaslkdfjas
using namespace std;
typedef long long LL;
int lcs(char *a,char *b){
    int dp[20][20];
    rst(dp,0);
    int la = strlen(a) , lb = strlen(b);
    REP(i,la)REP(j,lb){
        dp[i+1][j+1] = MAX(dp[i+1][j],dp[i][j+1]);
        if(a[i] == b[j]) dp[i+1][j+1] = MAX(dp[i+1][j+1] , dp[i][j] + 1);
        if(i == j && i+1 - dp[i+1][j+1] > 2)return -1;
    }
    return dp[la][lb];
}
int judge(char *a,char *b){
    int len = strlen(a);
    int ans = 0;
    REP(i,len){
        if(a[i] != b[i])ans++;
    }return ans;
}
char diction[10100][20] , ss[20];
int condition;
int lalala[10100] , tot;
int main(void){
    //freopen("in.txt" , "r" , stdin);
    int n = 0;
    while(gets(diction[n])){
        if(0 == strcmp(diction[n] , "#"))break;
        n++;
    }
    while(gets(ss)){
        if(0 == strcmp(ss , "#"))break;
        condition = 2; tot = 0;
        int len = strlen(ss);
        REP(i,n){
            int tlen = strlen(diction[i]);
            if(abs(len - tlen) > 1)continue;
            int tt = lcs(ss , diction[i]);
            if(len == tlen && tt == len){
                condition = 0;
                break;
            }
            if(len == tt && tlen - len == 1){
                lalala[tot] = i;
                tot++;
                condition = 1;
            }else if(tlen == tt && len - tlen == 1){
                lalala[tot] = i;
                tot++;
                condition = 1;
            }else if(tlen == len && len - tt == 1 && judge(ss,diction[i]) == 1){
                lalala[tot] = i;
                tot++;
                condition = 1;
            }
        }
        if(!condition){
            printf("%s is correct\n",ss);
        }else if(condition == 1){
            printf("%s:",ss);
            REP(i,tot){
                printf(" %s",diction[lalala[i]]);
            }printf("\n");
        }else{
            printf("%s:\n",ss);
        }
    }return 0;
}
