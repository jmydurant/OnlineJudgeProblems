#include <cstdio>    //我的第一道二分图匹配。。裸的。。但是终于看懂增广路的Hungary算法了。。
#include <cstring>   //http://wenku.baidu.com/view/778f800303d8ce2f0066230d.html   具体的可以看这个很详细。。
#include <cmath>
#include <iostream>
#include <algorithm>
#include <vector>
#define INF 100000000
#define mod 1000000007LL
#define MAXN 210
#define eps  1e-3
#define abs(x) ((x)>0?(x):(-(x)))
using namespace std;
typedef long long LL;

bool puzzle[MAXN][MAXN];
bool visit[MAXN];
int link[MAXN];
int n,m;

bool dfs(int u)
{
    for(int i = 1;i<=m;i++)
    {
        if(puzzle[u][i] && (!visit[i]))
        {
            int j = link[i];
            visit[i] = true;
            link[i] = u;
            if(j == -1 || dfs(j))
                return true;
            link[i] = j;
        }
    }
    return false;
}

int Hungary(void)
{
    memset(link,-1,sizeof(link));
    int ans = 0;
    for(int i = 1;i<=n;i++)
    {
        for(int j = 1;j<=m;j++)visit[j] = false;
        if(dfs(i))
            ans++;
    }
    return ans;
}

int main(void)
{
    while(2==scanf("%d%d",&n,&m))
    {
        memset(puzzle,false,sizeof(puzzle));
        for(int i = 1;i<=n;i++)
        {
            int tot; scanf("%d",&tot);
            for(int j = 1;j<=tot;j++)
            {
                int k; scanf("%d",&k);
                puzzle[i][k] = true;
            }
        }
        printf("%d\n",Hungary());
    }
    return 0;
}


