#include <iostream>   //我是沙茶....今天又写搓了。。
#include <cstdio>     //如果能从一个任务时间足够的赶到另一个任务。。那么就连线。。显然变成了无环图的最小路径覆盖。。
#include <cstring>
#include <algorithm>
#include <queue>
#include <stack>
#include <climits>
#include <ctime>
#include <cmath>
#include <set>
#include <map>
#include <string>
#include <vector>
#define MAX(a,b) ((a)>(b)?(a):(b))
#define MIN(a,b) ((a)<(b)?(a):(b))
#define abs(x) ((x)>0?(x):(-(x)))
#define FOR(i,a,b) for(int i = (a);i<=(b);i++)
#define FORD(i,a,b) for(int i = (a);i>=(b);i--)
#define REP(i,n) for(int i = 0;i<(n);i++)
#define rst(x,k) memset(x,k,sizeof(x))
#define lowbit(x) ((x)&(-(x)))
#define h(x) (1<<(x))
#define lson (ind<<1)
#define rson (ind<<1|1)
#define eps 1e-6
#define INF 1400000000
#define maxn 600
//#define mod 1000000007LL
#define fr first
#define se second
#define Pi acos(-1.0)
#define link fjksldfjaslkdfjas
#define y1 fslkd
using namespace std;
typedef long long LL;
int t1[510] , t2[510] , n;
int x1[510] , x2[510] , y1[510] , y2[510];
int visit[510] , link[510] , ind;
bool puzzle[510][510];
bool Hungary(int u){
    FOR(v,1,n){
        if(puzzle[u][v] && visit[v] != ind){
            visit[v] = ind;
            if(link[v] == -1 || Hungary(link[v])){
                link[v] = u;
                return true;
            }
        }
    }return false;
}
void solve(void){
    scanf("%d",&n);
    FOR(i,1,n){
        int mm,ss;
        scanf("%d:%d%d%d%d%d",&mm,&ss,x1+i,y1+i,x2+i,y2+i);
        t1[i] = mm*60 + ss;
        t2[i] = t1[i] + abs(x1[i] - x2[i]) + abs(y1[i] - y2[i]);
    }
    rst(visit,0) ; rst(link,-1) ; rst(puzzle,false);
    FOR(i,1,n){
        FOR(j,1,n){
            if(i == j)continue;
            int sss = t2[i] + abs(x2[i] - x1[j]) + abs(y2[i] - y1[j]);
            if(sss < t1[j])puzzle[i][j] = true;
        }
    }
    int ans = n;
    FOR(i,1,n){
        ind = i;
        if(Hungary(i)) ans--;
    }
    printf("%d\n",ans);
}
int main(void){
    int casenum; scanf("%d",&casenum);
    while(casenum--) solve();
    return 0;
}
