#include <iostream>   //我是沙茶....今天又写搓了。。
#include <fstream>
#include <cstdio>   //建图很简单。。二分即可。。思路见下。。
#include <cstring>
#include <algorithm>
#include <queue>
#include <stack>
#include <climits>
#include <ctime>
#include <cmath>
#include <set>
#include <map>
#include <string>
#include <vector>
#include <list>
#define MAX(a,b) ((a)>(b)?(a):(b))
#define MIN(a,b) ((a)<(b)?(a):(b))
#define abs(x) ((x)>0?(x):(-(x)))
#define FOR(i,a,b) for(int i = (a);i<=(b);i++)
#define FORD(i,a,b) for(int i = (a);i>=(b);i--)
#define REP(i,n) for(int i = 0;i<(n);i++)
#define rst(x,k) memset(x,k,sizeof(x))
#define lowbit(x) ((x)&(-(x)))
#define h(x) (1<<(x))
//#define lson (ind<<1)
//#define rson (ind<<1|1)
#define eps 1e-3
#define INF 50000000
#define maxn 1010
#define mod 1000000007LL
#define Pi acos(-1.0)
#define link fjksldfjaslkdfjas
using namespace std;
typedef long long LL;
int n,s1,s2;
struct node{
    int t,nxt;
}edge[11010100];
int headline[maxn] , E;
inline void add(int f,int t){
    edge[E].t = t;
    edge[E].nxt = headline[f];
    headline[f] = E++;
}
struct aa{
    int x,y;
}pp[maxn];
inline int cal(int i,int j){
    return abs(pp[i].x - pp[j].x) + abs(pp[i].y - pp[j].y);
}
int mid;
int puzzle[510][510];
int A[1010][2] , B[1010][2];
void buildg(void){
    rst(headline,-1); E = 0;
    FOR(i,1,n){
        FOR(j,i+1,n){
            if(puzzle[i][n+1] + puzzle[j][n+1] > mid){
                add(i,j+n);
                add(j,i+n);
            }
            if(puzzle[i][n+2] + puzzle[j][n+2] > mid){
                add(i+n,j);
                add(j+n,i);
            }
            if(puzzle[i][n+1] + puzzle[j][n+2] + puzzle[n+1][n+2] > mid){
                add(i,j);
                add(j+n,i+n);
            }
            if(puzzle[i][n+2] + puzzle[j][n+1] + puzzle[n+1][n+2] > mid){
                add(i+n,j+n);
                add(j,i);
            }
        }
    }
    FOR(i,1,s1){
        add(A[i][0] , A[i][1] + n);
        add(A[i][1] , A[i][0] + n);
        add(A[i][0] + n , A[i][1]);
        add(A[i][1] + n , A[i][0]);
    }
    FOR(i,1,s2){
        add(B[i][0] , B[i][1]);
        add(B[i][1] , B[i][0]);
        add(B[i][0] + n , B[i][1] + n);
        add(B[i][1] + n , B[i][0] + n);
    }
}
int dfn[maxn] , low[maxn] , tot , st[maxn<<2] , top , belong[maxn] , scc;
bool instack[maxn];
void tarjan(int u){
    dfn[u] = low[u] = ++tot;
    instack[u] = true;
    st[top] = u; top++;
    for(int i = headline[u];~i;i = edge[i].nxt){
        int v = edge[i].t;
        if(!dfn[v]){
            tarjan(v);
            low[u] = MIN(low[u] , low[v]);
        }else if(instack[v]) low[u] = MIN(low[u] , dfn[v]);
    }
    if(dfn[u] == low[u]){
        scc++;
        while(true){
            top--;
            int j = st[top];
            instack[j] = false;
            belong[j] = scc;
            if(j == u)break;
        }
    }
}
bool judge(void){
    rst(dfn,0); rst(instack,false);
    tot = top = scc = 0;
    FOR(i,1,2*n)if(!dfn[i])tarjan(i);
    FOR(i,1,n)if(belong[i] == belong[i + n])return false;
    return true;
}
void solve(void){
    scanf("%d%d%d%d",&pp[n+1].x , &pp[n+1].y , &pp[n+2].x , &pp[n+2].y);
    FOR(i,1,n) scanf("%d%d",&pp[i].x , &pp[i].y);
    FOR(i,1,s1) scanf("%d%d",A[i] , A[i] + 1);
    FOR(i,1,s2) scanf("%d%d",B[i] , B[i] + 1);
    FOR(i,1,n+2)FOR(j,1,n+2)puzzle[i][j] = cal(i,j);
    int l = 0 , r = 12000000;
    int ans = -1;
    while(l <= r){
        mid = (l+r)>>1;
        buildg();
        if(judge()){
            ans = mid;
            r = mid-1;
        }else l = mid+1;
    }
    printf("%d\n",ans);
}
int main(void){
    while(3 == scanf("%d%d%d",&n,&s1,&s2)) solve();
    return 0;
}
1.hate关系的i,j Xi->~Xj ~Xi->Xj Xj->~Xi ~Xj->Xi
2.friend关系的i,j Xi->Xj ~Xi->~Xj Xj->Xi ~Xj->~Xi
接下来的也要检查，因为引入参数，就是多了约束条件了
这四种情况就是i,j到达对方的所有情况了
3.dist(i,S1)+dist(S1,j)>limit Xi->~Xj Xj->~Xi
4.dist(i,S2)+dist(S2,j)>limit ~Xi->Xj ~Xj->Xi
5.dist(i,S1)+dist(S1,S2)+dist(S2,j)>limit Xi->Xj ~Xj->~Xi
5.dist(i,S2)+dist(S2,S1)+dist(S1,j)>limit ~Xi->~Xj Xj->Xi

然后求强连通分量判断Xi与~Xi是否在同一个连通分量中，是的话就有矛盾。