#include <stdio.h>    //这题奇葩之处在于路径是cost相乘。。cost都是double型的。。计算自己到自己的最大值。。。
#include <iostream>
#include <cstring>
#include <queue>
#include <cstdlib>
#include <map>
#include <string>
#define INF 0xffffffff
#define MAXN 51000
#define abs(a) ((a)>0?(a):(-(a)))
#define MAX(a,b) ((a)>(b)?(a):(b))
#define MIN(a,b) ((a)<(b)?(a):(b))
using namespace std;
map<string,int> q;
typedef pair<string,int> point;
double puzzle[100][100];
int main(void)
{
    int N;
    int iCase=1;
    while(cin >> N&& N)
    {
        q.clear();
        for(int i=1;i<=N;i++)
        {
            string name;
            cin >> name;
            q.insert(point(name,i));
        }
        for(int i=1;i<=N;i++)
            for(int j=1;j<=N;j++)
            puzzle[i][j]=1.0;
        for(int i=1;i<=N;i++)
            puzzle[i][i]=0.0;
        int M; scanf("%d",&M);
        for(int i=1;i<=M;i++)
        {
            int a,b;
            double c;
            string name1;
            string name2;
            cin >> name1 >> c >> name2;
            a=q[name1];
            b=q[name2];
            puzzle[a][b]=c;
        }
        for(int k=1;k<=N;k++)
        {
            for(int i=1;i<=N;i++)
            {
                for(int j=1;j<=N;j++)
                {
                    if(puzzle[i][j]<puzzle[i][k]*puzzle[k][j])
                        puzzle[i][j]=puzzle[i][k]*puzzle[k][j];
                }
            }
        }
        bool ok=false;
        for(int i=1;i<=N;i++)
        {
            if(puzzle[i][i]>1.0)
            {
                ok=true;
                break;
            }
        }
        printf("Case %d: ",iCase);
        iCase++;
        if(ok)
        {
            printf("Yes\n");
        }
        else
        {
            printf("No\n");
        }
    }
    return 0;
}
