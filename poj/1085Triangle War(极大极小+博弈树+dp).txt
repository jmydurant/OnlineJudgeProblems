#include <iostream>   //我是沙茶....今天又写搓了。。
#include <fstream>
#include <cstdio>    //其实就是记录状态的暴搜。。用dp加快速度罢了。。
#include <cstring>
#include <algorithm>
#include <queue>
#include <stack>
#include <climits>
#include <ctime>
#include <cmath>
#include <set>
#include <map>
#include <string>
#include <vector>
#include <list>
#define MAX(a,b) ((a)>(b)?(a):(b))
#define MIN(a,b) ((a)<(b)?(a):(b))
#define abs(x) ((x)>0?(x):(-(x)))
#define FOR(i,a,b) for(int i = (a);i<=(b);i++)
#define FORD(i,a,b) for(int i = (a);i>=(b);i--)
#define REP(i,n) for(int i = 0;i<(n);i++)
#define rst(x,k) memset(x,k,sizeof(x))
#define lowbit(x) ((x)&(-(x)))
#define h(x) (1<<(x))
//#define lson (ind<<1)
//#define rson (ind<<1|1)
#define eps 1e-6
#define INF 50000000
#define maxn 101000
#define mod 1000000007LL
#define Pi acos(-1.0)
#define link fjksldfjaslkdfjas
using namespace std;
typedef long long LL;
int line[18][2] = {       //记录点的标号对应的线
    {1,2} , {1,3} , {2,3} , {2,4} , {2,5} , {4,5} ,
    {3,5} , {3,6} , {5,6} , {4,7} , {4,8} , {7,8} ,
    {5,8} , {5,9} , {8,9} , {6,9} , {6,10} , {9,10}
};
int p[18] = {
    1,h(1),h(2),h(3),h(4),h(5),h(6),h(7),h(8),h(9),h(10),h(11),h(12),h(13),h(14),h(15),h(16),h(17)
};
int trangle[9][3] = {
    {h(0) , h(1) , h(2)},
    {h(3) , h(4) , h(5)},
    {h(2) , h(4) , h(6)},
    {h(6) , h(7) , h(8)},
    {h(9) , h(10) , h(11)},
    {h(5) , h(10) , h(12)},
    {h(12) , h(13) , h(14)},
    {h(8) , h(13) , h(15)},
    {h(15) , h(16) , h(17)}
};
int n , iCase;
int findline(int a,int b){
    FOR(i,0,17){
        if(line[i][0] == a && line[i][1] == b)return i;
    }
    return -1;
}
int setline(int st,int k){
    int ans = 0;
    REP(i,9){
        bool flag = false;
        int pp = 0;
        FOR(j,0,2){
            if(st & trangle[i][j]) pp++;
            if(k == trangle[i][j] && (k & st) == 0)flag = true;
        }
        if(flag && pp == 2) ans++;
    }
    return ans;
}
int dp[1<<18];
int dfs(int st){
    if(dp[st] != -INF)return dp[st];
    if(st == (h(18) - 1)){
        dp[st] = 0;
        return 0;
    }
    int ans = -INF;
    REP(i,18){
        if(!(h(i) & st)){
            int tt = setline(st,h(i));
            if(tt > 0) tt += dfs(st | (h(i)));
            else tt -= dfs(st | h(i));
            ans = MAX(ans,tt);
        }
    }
    return dp[st] = ans;
}
void solve(void){
    int state = 0;
    int turn = 1;
    int ans = 0;
    scanf("%d",&n);
    FOR(i,1,n){
        int a,b; scanf("%d%d",&a,&b);
        if(a > b) swap(a,b);
        int k = findline(a,b);
        int tt = setline(state , h(k));
        ans += turn * tt;
        state |= h(k);
        if(tt == 0)turn *= -1;
    }
    bool flag;
    if(ans + turn * dfs(state) > 0)flag = true;
    else flag = false;
    printf("Game %d: ",++iCase);
    if(flag)printf("A wins.\n");
    else printf("B wins.\n");
}
int main(void){
    iCase = 0;
    int cap = h(18);
    REP(i,cap) dp[i] = -INF;
    int casenum; scanf("%d",&casenum);
    while(casenum--) solve();
    return 0;
}
