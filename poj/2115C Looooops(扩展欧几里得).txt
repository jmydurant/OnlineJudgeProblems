#include<cstdio>   //方法见下。。。
#include<climits>
#include<algorithm>
#include<cstring>
#include<queue>
#include<cstdlib>
#include<cmath>
#include<stack>
#include<map>
#include<vector>
#define abs(a)  ((a)>0?(a):(-(a)))
#define MAX(a,b) ((a)>(b)?(a):(b))
#define MIN(a,b) ((a)<(b)?(a):(b))
#define INF 1000000000000LL
#define lowbit(a) (a)^(-(a))
using namespace std;
long long gcd(long long a,long long b)
{
    long long tmpt;
    while(b)
    {
        tmpt=a%b;
        a=b;
        b=tmpt;
    }
    return a;
}
long long e_gcd(long long a,long long b,long long &x,long long &y)
{
    if(0==b)
    {
        x=1;y=0;
        return a;
    }
    else
    {
        int d=e_gcd(b,a%b,x,y);
        long long tmpt=x;
        x=y;
        y=tmpt-a/b*y;
        return d;
    }
    return 0;
}
int main(void)
{
    long long a1,a2,a3,a4;
    while(EOF!=scanf("%I64d%I64d%I64d%I64d",&a1,&a2,&a3,&a4))
    {
        if(!a1 && !a2 && !a3 && !a4)break;
        long long n=(__int64)1<<a4;
        //printf("%I64d\n",n);
        long long a=a3;
        long long b=a2-a1;
        //if(b<0)b+=n;
        long long x,y;
        long long d=e_gcd(a,n,x,y);
        if(b%d)
        {
            printf("FOREVER\n");
            continue;
        }

        //n=(1LL<<a4);
        //d=gcd(a,n);
        x=(x*(b/d))%n;
        x=(x%(n/d)+n/d)%(n/d);
        printf("%I64d\n",x);
    }
    return 0;
}
题意不难理解，只是利用了 k位存储系统 的数据特性进行循环。
例如int型是16位的，那么int能保存2^16个数据，即最大数为65535（本题默认为无符号），
当循环使得i超过65535时，则i会返回0重新开始计数
如i=65534，当i+=3时，i=1
其实就是 i=(65534+3)%(2^16)=1
 
有了这些思想，设对于某组数据要循环x次结束，那么本题就很容易得到方程：
x=[(B-A+2^k)%2^k] /C
即 Cx=(B-A)(mod 2^k)  此方程为 模线性方程，本题就是求X的值。
 
下面将结合《算法导论》第2版进行简述，因此先把上面的方程变形，统一符号。
令a=C  
  b=B-A 
  n=2^k
那么原模线性方程变形为：
 ax=b (mod n)
该方程有解的充要条件为 gcd(a,n) | b ，即 b% gcd(a,n)==0
令d=gcd(a,n)
有该方程的 最小整数解为 x = e (mod n/d)
其中e = [x0 mod(n/d) + n/d] mod (n/d) ，x0为方程的最小解
那么原题就是要计算b% gcd(a,n)是否为0，若为0则计算最小整数解，否则输出FOREVER
 
当有解时，关键在于计算最大公约数 d=gcd(a,n) 与 最小解x0
参考《算法导论》，引入欧几里得扩展方程  d=ax+by ，
通过EXTENDED_EUCLID算法（P571）求得d、x、y值，其中返回的x就是最小解x0，求d的原理是辗转相除法（欧几里德算法）
再利用MODULAR-LINEAR-EQUATION-SOLVER算法（P564）通过x0计算x值。注意x0可能为负，因此要先 + n/d 再模n/d。