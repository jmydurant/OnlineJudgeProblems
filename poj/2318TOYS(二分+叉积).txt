#include<cstdio>    //叉积真是个好东西。。可以判断点和直线的位置关系。。二分是为了更快的找到盒子。。
#include<climits>
#include<algorithm>
#include<cstring>
#include<queue>
#include<cstdlib>
//#include<cmath>
#include<stack>
#include<map>
#include<vector>
#define abs(a)  ((a)>0?(a):(-(a)))
#define MAX(a,b) ((a)>(b)?(a):(b))
#define MIN(a,b) ((a)<(b)?(a):(b))
#define INF -0x0f0f0f0f
#define lowbit(a) ((a)&(-(a)))
#define MAXN 1001000
using namespace std;
typedef long long LL;
int package[5100];
struct point
{
    LL x1,x2;
}p[5100];
int N,M;
LL y1,y2,x,y;
LL abc;
int judge(LL left,LL right)
{
    LL f1=((y-y2)*(p[left].x1-p[left].x2)-(y1-y2)*(x-p[left].x2));
    LL f2=((y-y2)*(p[right].x1-p[right].x2)-(y1-y2)*(x-p[right].x2));
    if(f1<0 && f2>0)
        return 0;
    if(f1>0)return -1;
    else return 1;
}
void solve(LL l,LL r)
{
    LL mid=(l+r)/2;
    int flag=judge(mid,mid+1);
    if(0==flag)
    {
        abc=mid;
        return;
    }
    else if(1==flag)
        solve(mid+1,r);
    else
        solve(l,mid);
}
int main()
{
    while(EOF!=scanf("%d",&N) && N)
    {
        scanf("%d%I64d%I64d%I64d%I64d",&M,&p[0].x1,&y1,&p[N+1].x2,&y2);
        p[0].x2=p[0].x1;
        p[N+1].x1=p[N+1].x2;
        memset(package,0,sizeof(package));
        for(int i=1;i<=N;i++)
            scanf("%I64d%I64d",&p[i].x1,&p[i].x2);
        for(int i=1;i<=M;i++)
        {
            scanf("%I64d%I64d",&x,&y);
            solve(0,N+1);
            package[abc]++;
        }
        for(int i=0;i<=N;i++)
        {
            printf("%d: %d\n",i,package[i]);
        }
        printf("\n");
    }
    return 0;
}
