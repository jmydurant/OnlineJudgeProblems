#include <iostream>   //我是沙茶....今天又写搓了。。
#include <cstdio>     //沙茶裸题。。。
#include <cstring>
#include <algorithm>
#include <queue>
#include <climits>
#include <ctime>
#include <cmath>
#include <set>
#include <map>
#include <string>
#define MAX(a,b) ((a)>(b)?(a):(b))
#define MIN(a,b) ((a)<(b)?(a):(b))
#define abs(x) ((x)>0?(x):(-(x)))
#define FOR(i,a,b) for(int i = (a);i<=(b);i++)
#define FORD(i,a,b) for(int i = (a);i>=(b);i--)
#define REP(i,n) for(int i = 0;i<(n);i++)
#define rst(x,k) memset(x,k,sizeof(x))
#define lowbit(x) ((x)&(-(x)))
#define h(x) (1<<(x))
#define lson (ind<<1)
#define rson (ind<<1|1)
#define eps 1e-6
#define INF 1000000000
#define maxn 110000
#define mod 1000000007LL
using namespace std;
typedef long long LL;
int a[maxn],n,Q;
struct node{
    int s[maxn<<2];
    void build(int l,int r,int ind){
        if(l == r){
            s[ind] = a[l];
            return;
        }
        int mid = (l+r)>>1;
        build(l,mid,lson);
        build(mid+1,r,rson);
        s[ind] = s[lson] + s[rson];
    }
    void change(int pos,int _val,int l,int r,int ind){
        if(l == r){
            s[ind] = _val;
            return;
        }
        int mid = (l+r)>>1;
        if(pos <= mid)change(pos,_val,l,mid,lson);
        else change(pos,_val,mid+1,r,rson);
        s[ind] = s[lson] + s[rson];
    }
    void req(int k,int l,int r,int ind){
        if(l == r){
            printf("%d\n",l);
            return;
        }
        int mid = (l+r)>>1;
        if(k > s[lson])req(k - s[lson],mid+1,r,rson);
        else req(k,l,mid,lson);
    }
}seg_tree;
int main(void){
    while(EOF != scanf("%d",&n)){
        FOR(i,1,n)scanf("%d",a+i);
        seg_tree.build(1,n,1);
        scanf("%d",&Q);
        char op[10];
        int x,y;
        while(Q--){
            scanf("%s",op);
            if(op[0] == 'q'){
                scanf("%d",&x);
                seg_tree.req(x,1,n,1);
            }else{
                scanf("%d%d",&x,&y);
                seg_tree.change(x,y,1,n,1);
            }
        }
    }return 0;
}
