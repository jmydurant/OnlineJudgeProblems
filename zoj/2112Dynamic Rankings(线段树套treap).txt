#include <iostream>    //这种线段树中套其他树真是强大啊。。。动态的第K大就这样被解决了。。
#include <cstdio>      //treap已经写的比较熟练了。。
#include <cstring>
#include <algorithm>
#include <queue>
#include <climits>
#include <ctime>
#include <cmath>
#define MAX(a,b) ((a)>(b)?(a):(b))
#define MIN(a,b) ((a)<(b)?(a):(b))
#define abs(x) (x)>0?(x):(-(x))
#define FOR(i,a,b) for(int i = (a);i<=(b);i++)
#define FORD(i,a,b) for(int i = (a);i>=(b);i--)
#define REP(i,n) for(int i = 0;i<(n);i++)
#define rst(x,k) memset(x,k,sizeof(x))
#define lson (ind<<1)
#define rson (ind<<1|1)
#define maxn 1100000
#define INF 1000000000
using namespace std;
typedef long long LL;
struct node
{
    int l,r;
    int key,fix;
    int s,weight;  //s表示当前key值有多少个点。。weight表示这个子树有多少个点。。
}tree[1100000];
int a[54000];
int n,m;
inline void update(int x)
{
    if(x == -1)return;
    tree[x].weight = tree[x].s;
    if(tree[x].l != -1) tree[x].weight += tree[tree[x].l].weight;
    if(tree[x].r != -1) tree[x].weight += tree[tree[x].r].weight;
}
int cnt;
int root[240000];
void test(int x,int kind)
{
    if(x == -1)return;
    printf("(");
    test(tree[x].l,kind);
    if(kind == 1)printf("%d",tree[x].key);
    else printf("%d",tree[x].weight);
    test(tree[x].r,kind);
    printf(")");
}
void INIT(void)
{
    cnt = -1;
    rst(root,-1);
    srand(time(0));
}
void ro_l(int &x)
{
    int y = tree[x].r;
    tree[x].r = tree[y].l;
    tree[y].l = x;
    update(x);
    update(y);
    x = y;
}
void ro_r(int &x)
{
    int y = tree[x].l;
    tree[x].l = tree[y].r;
    tree[y].r = x;
    update(x);
    update(y);
    x = y;
}

void Insert(int  &x,int key)
{
    if(x == -1)
    {
        x = ++cnt;
        tree[x].l = tree[x].r = -1;
        tree[x].s = 1;
        tree[x].key = key;
        tree[x].fix = rand();
        update(x);
        return;
    }
    if(tree[x].key > key)
    {
        Insert(tree[x].l,key);
        update(x);
        if(tree[tree[x].l].fix > tree[x].fix)
            ro_r(x);
    }
    else if(tree[x].key < key)
    {
        Insert(tree[x].r,key);
        update(x);
        if(tree[tree[x].r].fix > tree[x].fix)
            ro_l(x);
    }
    else
    {
        tree[x].s++;
        update(x);
    }
}

void Delete(int &x,int key)
{
    if(x == -1) return;
    if(tree[x].key > key)
        Delete(tree[x].l,key);
    else if(tree[x].key < key)
        Delete(tree[x].r,key);
    else
    {
        if(tree[x].s >1)tree[x].s--;
        else if(tree[x].l == -1 && tree[x].r == -1)
            x = -1;
        else if(tree[x].l == -1)
            x = tree[x].r;
        else if(tree[x].r == -1)
            x = tree[x].l;
        else if(tree[tree[x].l].fix > tree[tree[x].r].fix)
        {
            ro_r(x);
            Delete(tree[x].r,key);
        }
        else
        {
            ro_l(x);
            Delete(tree[x].l,key);
        }
    }
    update(x);
}

int getless(int x,int key)
{
    int ans = 0;
    while(x != -1)
    {
        if(tree[x].key > key)
            x = tree[x].l;
        else
        {
            int ls = 0;
            if(tree[x].l != -1) ls = tree[tree[x].l].weight;
            ans += (ls + tree[x].s);
            x = tree[x].r;
        }
    }
    return ans;
}

int askkkk(int l,int r,int ind,int QL,int QR,int key)
{
    if(QL<=l && QR>=r) return getless(root[ind],key);
    int mid = (l+r)>>1;
    int ans = 0;
    if(QL <= mid) ans += askkkk(l,mid,lson,QL,QR,key);
    if(QR > mid) ans += askkkk(mid+1,r,rson,QL,QR,key);
    return ans;
}

int B_search(int QL,int QR,int k)
{
    int l = 0,r = INF;
    int ans;
    while(l<=r)
    {
        int mid = (l+r)>>1;
        int ra = askkkk(1,n,1,QL,QR,mid);
        if(ra>=k)
        {
            ans = mid;
            r = mid-1;
        }
        else
            l = mid+1;
    }
    return ans;
}

void build(int l,int r,int ind)
{
    root[ind] = -1;
    FOR(i,l,r)Insert(root[ind],a[i]);
    if(l>=r)return;
    int mid = (l+r)>>1;
    build(l,mid,lson);
    build(mid+1,r,rson);
}

void changew(int l,int r,int ind,int k,int key)
{
    Delete(root[ind],a[k]);
    Insert(root[ind],key);
    if(l>=r)return;
    int mid = (l+r)>>1;
    if(k<=mid)
        changew(l,mid,lson,k,key);
    else
        changew(mid+1,r,rson,k,key);
}
int main(void)
{
    int casenum; scanf("%d",&casenum);
    while(casenum--)
    {
        INIT();
        scanf("%d%d",&n,&m);
        FOR(i,1,n) scanf("%d",a+i);
        build(1,n,1);
        //test(root[1],1),printf("\n");
        //test(root[1],2),printf("\n");
        FOR(i,1,m)
        {
            char op[10];
            scanf("%s",op);
            if(op[0] == 'Q')
            {
                int a,b,k; scanf("%d%d%d",&a,&b,&k);
                printf("%d\n",B_search(a,b,k));
            }
            else
            {
                int k,b; scanf("%d%d",&k,&b);
                changew(1,n,1,k,b);
                //test(root[2],1),printf("\n");
                //test(root[2],2),printf("\n");
                a[k] = b;
            }
        }
    }
}
