#include <iostream>   //我是沙茶....今天又写搓了。。
#include <fstream>    //线段树维护矩阵区间乘积。。然后就可以了。。
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <queue>
#include <stack>
#include <climits>
#include <ctime>
#include <cmath>
#include <set>
#include <map>
#include <string>
#include <vector>
#include <list>
#include <utility>
#define MAX(a,b) ((a)>(b)?(a):(b))
#define MIN(a,b) ((a)<(b)?(a):(b))
#define abs(x) ((x)>0?(x):(-(x)))
#define FOR(i,a,b) for(int i = (a);i<=(b);i++)
#define FORD(i,a,b) for(int i = (a);i>=(b);i--)
#define REP(i,n) for(int i = 0;i<(n);i++)
#define rst(x,k) memset(x,k,sizeof(x))
#define lowbit(x) ((x)&(-(x)))
#define h(x) (1<<(x))
#define lson (ind<<1)
#define rson (ind<<1|1)
#define eps 1e-8
#define INF 500000000
#define maxn 110000
#define mod 1000000007LL
#define Pi acos(-1.0)
#define link fjksldfjaslkdfjas
using namespace std;
typedef long long LL;
struct mat{
    LL a[2][2];
    mat(){rst(a,0);}
    void INIT(void){rst(a,0);}
    void show(void){
        FOR(i,0,1){
            FOR(j,0,1)printf("%I64d ",a[i][j]); printf("\n");
        }
    }
}pp[maxn];
mat operator + (mat & a, mat & b){
    mat ans;
    FOR(i,0,1)FOR(j,0,1){
        ans.a[i][j] = a.a[i][j] + b.a[i][j];
        ans.a[i][j] %= mod;
    }return ans;
}
mat operator * (mat &a,mat &b){
    mat ans;
    FOR(i,0,1){
        FOR(j,0,1){
            FOR(k,0,1){
                ans.a[i][j] += a.a[i][k] * b.a[k][j] % mod;
                ans.a[i][j] %= mod;
            }
        }
    }return ans;
}
struct node{
    mat s[maxn << 3];
    void build(int l,int r,int ind){
        if(l == r){
            s[ind] = pp[l];
            return;
        }
        int mid = (l+r)>>1;
        build(l,mid,lson);
        build(mid+1,r,rson);
        s[ind] = (s[lson] * s[rson]);
    }
    mat req(int l,int r,int ind,int Ql,int Qr){
        if(Ql <= l && r <= Qr){
            return s[ind];
        }
        int mid = (l+r)>>1;
        if(Qr <= mid)return req(l,mid,lson,Ql,Qr);
        else if(Ql > mid) return req(mid+1,r,rson,Ql,Qr);
        else {
            mat t1 = req(l,mid,lson,Ql,mid);
            mat t2 = req(mid+1,r,rson,mid+1,Qr);
            return t1 * t2;
        }
    }
}sb;
int n,Q;
void solve(void){
    scanf("%d%d",&n,&Q);
    FOR(i,1,n){
        scanf("%lld" , &pp[i].a[1][0]);
        pp[i].a[0][0] = pp[i].a[0][1] = 1;
        pp[i].a[1][1] = 0;
    }
    sb.build(1,n,1);
    while(Q--){
        int l,r; scanf("%d%d",&l,&r);
        if(r - l <= 1){
            printf("%lld\n",pp[r].a[1][0]);
        }else{
            mat temp = sb.req(1,n,1,l+2,r);
            //temp.show();
            mat ans;
            ans.a[0][0] = pp[l+1].a[1][0];
            ans.a[0][1] = pp[l].a[1][0];
            ans = (ans * temp);
            printf("%lld\n",ans.a[0][0]);
        }
    }
}
int main(void){
    int casenum; scanf("%d",&casenum);
    while(casenum--) solve();
    return 0;
}
