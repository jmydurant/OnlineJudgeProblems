#include<cstdio>     //这次期望DP就稍微有点难了。。所以还是把解析弄在下面。。。
#include<climits>
#include<algorithm>
#include<cstring>
#include<queue>
#include<cstdlib>
#include<cmath>
#include<stack>
#include<map>
#include<vector>
#define abs(a)  ((a)>0?(a):(-(a)))
#define MAX(a,b) ((a)>(b)?(a):(b))
#define MIN(a,b) ((a)<(b)?(a):(b))
#define INF 1000000000000LL
#define lowbit(a) (a)^(-(a))
using namespace std;
double p[20];
double A[550],B[550];
int main(void)
{
    int casenum; scanf("%d",&casenum);
    while(casenum--)
    {
        int N,k1,k2,k3,a,b,c;
        scanf("%d%d%d%d%d%d%d",&N,&k1,&k2,&k3,&a,&b,&c);
        memset(p,0,sizeof(p));
        memset(A,0,sizeof(A));
        memset(B,0,sizeof(B));
        p[0]=1.0/(((double)k1)*((double)k2)*((double)k3));
        for(int i=1;i<=k1;i++)
        {
            for(int j=1;j<=k2;j++)
            {
                for(int k=1;k<=k3;k++)
                {
                    if(i==a && j==b && k==c)continue;
                    p[i+j+k]+=p[0];
                }
            }
        }
        //printf("%lf\n",p[3]);
        for(int i=N;i>=0;i--)
        {
            for(int j=3;j<=k1+k2+k3;j++)
            {
                A[i]+=p[j]*A[i+j];
                B[i]+=p[j]*B[i+j];
            }
            A[i]+=p[0];
            B[i]+=1;
        }
        double res=B[0]/(1.0-A[0]);
        printf("%.15lf\n",res);
    }
    return 0;
}
dp求期望的题。 
    题意： 
    有三个均匀的骰子，分别有k1,k2,k3个面，初始分数是0， 
    当掷三个骰子的点数分别为a,b,c的时候，分数清零，否则分数加上三个骰子的点数和， 
    当分数>n的时候结束。求需要掷骰子的次数的期望。 
    题解: 
    设 E[i]表示现在分数为i，到结束游戏所要掷骰子的次数的期望值。 
    显然 E[>n] = 0; E[0]即为所求答案; 
    E[i] = ∑Pk*E[i+k] + P0*E[0] + 1; (Pk表示点数和为k的概率，P0表示分数清零的概率) 
    由上式发现每个 E[i]都包含 E[0]，而 E[0]又是我们要求的，是个定值。 
    设 E[i] = a[i]*E[0] + b[i]; 
    将其带入上面的式子： 
    E[i] = ( ∑Pk*a[i+k] + P0 )*E[0] + ∑Pk*b[i+k] + 1; 
    显然， 
    a[i] = ∑Pk*a[i+k] + P0; 
    b[i] = ∑Pk*b[i+k] + 1; 
    当 i > n 时： 
    E[i] = a[i]*E[0] + b[i] = 0; 
    所以 a[i>n] = b[i>n] = 0; 
    可依次算出 a[n],b[n]; a[n-1],b[n-1] ... a[0],b[0]; 
    则 E[0] = b[0]/(1 - a[0]); 