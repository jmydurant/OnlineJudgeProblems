#include <iostream>   //我是沙茶....今天又写搓了。。
#include <fstream>    //很难想象。。一道题目居然能综合成这种程度。。
#include <cstdio>     //首先把最右边的点设为根。。然后从右向左做凸包。。然后如果一个点被踢出凸包队列。。就把他和上一个点连边
#include <cstring>    //最后对询问做LCA即可。。
#include <algorithm>
#include <queue>
#include <stack>
#include <climits>
#include <ctime>
#include <cmath>
#include <set>
#include <map>
#include <string>
#include <vector>
#include <list>
#define MAX(a,b) ((a)>(b)?(a):(b))
#define MIN(a,b) ((a)<(b)?(a):(b))
#define abs(x) ((x)>0?(x):(-(x)))
#define FOR(i,a,b) for(int i = (a);i<=(b);i++)
#define FORD(i,a,b) for(int i = (a);i>=(b);i--)
#define REP(i,n) for(int i = 0;i<(n);i++)
#define rst(x,k) memset(x,k,sizeof(x))
#define lowbit(x) ((x)&(-(x)))
//#define h(x) (1<<(x))
//#define lson (ind<<1)
//#define rson (ind<<1|1)
#define eps 1e-6
#define INF 50000000
#define maxn 101000
#define mod 1000000007LL
#define Pi acos(-1.0)
#define link fjksldfjaslkdfjas
using namespace std;
typedef long long LL;
struct P{
    double x,y;
    P(double _x = 0.0 , double _y = 0.0){x = _x , y = _y;}
    P operator + (P b){
        return P(x + b.x , y + b.y);
    }
    P operator - (P b){
        return P(x - b.x , y - b.y);
    }
}p[maxn];
int n,Q;
struct node{
    int t,nxt;
}edge[maxn << 1];
int headline[maxn] , E;
void add(int f,int t){
    //printf("f is %d t is %d\n",f,t);
    edge[E].t = t;
    edge[E].nxt = headline[f];
    headline[f] = E++;
}
int st[maxn] , top;
double dot(P a,P b){
    return a.x * b.y - b.x * a.y;
}
double cross(P a,P b,P x){
    return dot(a - x , b - x);
}
bool judge(P a,P b,P x){
    double ans = cross(a,b,x);
    if(ans < eps)return false;
    return true;
}
struct aa{
    int t,ind;
    aa(int _t = 0 , int _ind = 0){t = _t , ind = _ind;}
};
vector<aa> ques[maxn];
bool visit[maxn];
int ans[maxn] , fa[maxn];
int findfa(int x){
    if(x != fa[x]) fa[x] = findfa(fa[x]);
    return fa[x];
}
void dfs(int u){
    visit[u] = true;
    for(int i = headline[u];~i;i = edge[i].nxt){
        int v = edge[i].t;
        if(!visit[v]){
            dfs(v);
            fa[v] = u;
        }
    }
    int ss = ques[u].size();
    for(int i = 0;i<ss;i++){
        int v = ques[u][i].t;
        if(visit[v]){
            ans[ques[u][i].ind] = findfa(v);
        }
    }
}
void solve(void){
    FOR(i,1,n) scanf("%lf%lf",&p[i].x , &p[i].y);
    rst(headline,-1); E = 0;
    top = 2;
    st[0] = n; st[1] = n-1;
    for(int i = n-2;i>=1;i--){
        while(top >= 2 && (judge(p[st[top-2]] , p[i] , p[st[top - 1]]))){
            add(st[top-1] , st[top-2]);
            add(st[top-2] , st[top-1]);
            top--;
        }
        st[top] = i;top++;
    }
    while(top >= 2){
        add(st[top-1] , st[top-2]);
        add(st[top-2] , st[top-1]);
        top--;
    }
    FOR(i,1,n){
        ques[i].clear();
        visit[i] = false;
        fa[i] = i;
    }
    scanf("%d",&Q);
    REP(i,Q){
        int x,y; scanf("%d%d",&x,&y);
        ques[x].push_back(aa(y,i));
        ques[y].push_back(aa(x,i));
    }
    dfs(n);
    REP(i,Q)printf("%d%c",ans[i] , (i == Q-1)?'\n':' ');
}
int main(void){
    while(EOF != scanf("%d",&n)) solve();
    return 0;
}
