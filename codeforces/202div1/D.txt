#include <iostream>
#include <cstdio>
#include <cstring>
#include <string>
#include <cstdlib>
#include <vector>
#define FOR(i,a,b) for(int i = (int)a ;i<=(int)b;i++)
#define MAX(a,b) ((a)>(b)?(a):(b))
#define MIN(a,b) ((a)<(b)?(a):(b))
#define MAXN 120000
using namespace std;
typedef long long LL;
LL vmax[MAXN];
LL son[MAXN];
vector<int>tree[MAXN];
int n;

LL gcd(LL a,LL b)
{
    LL temp;
    while(b)
    {
        temp = a%b;
        a = b;
        b = temp;
    }
    return a;
}

LL lcm(LL a,LL b)
{
    return a/gcd(a,b)*b;
}

bool dfs(int u,int fa)
{
    if(tree[u].size()==1 && tree[u][0] == fa)
    {
        if(vmax[u] == 0)
            return false;
        else
            return true;
    }
    LL minr = 1000000000; //最小的公倍数的个数;
    LL gongbeishu = 1;
    for(unsigned int i = 0;i<tree[u].size();i++)
    {
        if(tree[u][i] != fa)
        {
            if(!dfs(tree[u][i],u))return false;
            gongbeishu = lcm(gongbeishu,son[tree[u][i]]);
            son[u]++;
        }
    }
    son[u] *= gongbeishu;
    for(unsigned int i = 0;i<tree[u].size();i++)
    {
        if(tree[u][i] != fa)
        {
            minr = MIN(vmax[tree[u][i]] / gongbeishu,minr);
        }
    }
    vmax[u] = son[u]*minr;
    if(vmax[u])
        return true;
    return false;
}

int main(void)
{
    while(cin >> n)
    {
        LL sum = 0;
        memset(son,0,sizeof(son));
        for(int i = 1;i<=n;i++)
        {
            cin  >> vmax[i];
            sum += vmax[i];
            if(vmax[i])
                son[i] = 1;
        }
        for(int i = 1;i<=n;i++)
            tree[i].clear();
        for(int i = 1;i<n;i++)
        {
            int a,b; cin >> a >> b;
            tree[a].push_back(b);
            tree[b].push_back(a);
        }
        if(!dfs(1,-1))
            cout << sum << endl;
        else
            cout << sum - vmax[1] << endl;
    }
    return 0;
}
