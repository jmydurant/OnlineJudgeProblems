#include <iostream>   //我是沙茶....今天又写搓了。。
#include <cstdio>     //不能再沙茶了。。思路是这样的。。ko0为s2s2 1->s1s2 2->s2s1
#include <cstring>    //state为 0->XX 1->CX 2->XA 3->CA然后匹配着解决就可以了。。
#include <algorithm>
#include <queue>
#include <stack>
#include <climits>
#include <ctime>
#include <cmath>
#include <set>
#include <map>
#include <string>
#define MAX(a,b) ((a)>(b)?(a):(b))
#define MIN(a,b) ((a)<(b)?(a):(b))
#define abs(x) ((x)>0?(x):(-(x)))
#define FOR(i,a,b) for(int i = (a);i<=(b);i++)
#define FORD(i,a,b) for(int i = (a);i>=(b);i--)
#define REP(i,n) for(int i = 0;i<(n);i++)
#define rst(x,k) memset(x,k,sizeof(x))
#define lowbit(x) ((x)&(-(x)))
#define h(x) (1<<(x))
#define lson (ind<<1)
#define rson (ind<<1|1)
#define eps 1e-6
#define INF 1400000000
#define maxn 301000
#define mod 1000000007LL
#define fr first
#define se second
using namespace std;
typedef long long LL;
int n,m,x,k;
LL f[52];
LL ko[3][52];
bool match(int sx,int sy){
    LL f1 = f[k-2] , f2 = f[k-1];
    int sn = n, sm = m;
    int ans = x;
    bool flx = false,frx = false,fly = false,fry = false;
    if(sx == 1)flx = true , sn--;
    if(sx == 2)frx = true , sn--;
    if(sx == 3)flx = frx = true , sn -= 2;
    if(sy == 1)fly = true , sm--;
    if(sy == 2)fry = true , sm--;
    if(sy == 3)fly = fry = true , sm -= 2;
    if(sn < 0 || sm < 0)return false;
    if(fly && fry)ans -= ko[0][k];
    if(frx && fly)ans -= ko[1][k];
    if(fry && flx)ans -= ko[2][k];
    if(ans < 0)return false;
    LL i = 0, j = 0;
    bool isfind = false;
    //if(sx == 0 && sy == 0)printf("fuck %I64d  % I64d   %d\n",f1,f2,sm);
    for(i = 0;i<=(sn/2);i++){
        //if(sx == 0 && sy == 0)printf("loop\n");
        for(j = 0;j<=(sm/2);j++){
            //if(sx == 0 && sy == 0)printf("loop i is %I64d  j is %I64d\n",i,j);
            //if(i == 1 && j == 1)printf("fuck\n");
            if(i * f1 + j * f2 == ans){
                isfind = true;
                break;
            }
        }
        if(isfind)break;
    }
    if(isfind){
        int tt = 0;
        if(flx)printf("C");
        for(;tt < i;tt++)printf("AC");
        tt *= 2;
        for(;tt < sn;tt++)printf("Q");
        if(frx)printf("A");
        printf("\n");
        tt = 0;
        if(fly)printf("C");
        for(;tt < j;tt++)printf("AC");
        tt *= 2;
        for(;tt < sm;tt++)printf("Q");
        if(fry)printf("A");
        printf("\n");
        return true;
    }
    return false;
}
int main(void){
    f[1] = f[2] = 1;
    for(int i = 3;i<=50;i++){
        f[i] = f[i-1] + f[i-2];
    }
    ko[0][3] = 0; ko[1][3] = 1; ko[2][3] = 0;
    ko[0][4] = 0; ko[1][4] = 1; ko[2][4] = 1;
    for(int i = 5;i<=50;i++){
        if(i & 1){
            ko[0][i] = ko[0][i-1] + ko[0][i-2] + 1;
            ko[1][i] = ko[1][i-1] + ko[1][i-2];
            ko[2][i] = ko[2][i-1] + ko[2][i-2];
        }else{
            ko[0][i] = ko[0][i-1] + ko[0][i-2];
            ko[1][i] = ko[1][i-1] + ko[1][i-2];
            ko[2][i] = ko[2][i-1] + ko[2][i-2] + 1;
        }
    }
    while(4 == scanf("%d%d%d%d",&k,&x,&n,&m)){
        bool ok = false;
        /*LL i = 0, j = 0;
        for(;i<=(n/2);i++){
            for(;j<=(m/2);j++){
                if(f1 * i + f2 * j == x){
                    ok = true;
                    break;
                }
            }if(ok)break;
        }
        if(ok){
            int tt = 0;
            for(;tt <= i;tt++)printf("AC");
            tt *= 2;
            for(;tt <= n;tt++)printf("Q");
            printf("\n");
            tt = 0;
            for(;tt <= j;tt++)printf("AC");
            tt *= 2;
            for(;tt <= m;tt++)printf("Q");
            printf("\n");
            continue;
        }*/
        for(int sx = 0;sx < 4 ;sx++){
            for(int sy = 0;sy < 4;sy++){
                if(match(sx,sy)){
                    ok = true;
                    break;
                }
            }
            if(ok)break;
        }
        if(!ok)printf("Happy new year!\n");
    }
}


