#include <iostream>   //我是沙茶....今天又写搓了。。
#include <cstdio>     //裸地线段树。。。
#include <cstring>
#include <algorithm>
#include <queue>
#include <climits>
#include <ctime>
#include <cmath>
#include <set>
#include <map>
#include <string>
#define MAX(a,b) ((a)>(b)?(a):(b))
#define MIN(a,b) ((a)<(b)?(a):(b))
#define abs(x) ((x)>0?(x):(-(x)))
#define FOR(i,a,b) for(int i = (a);i<=(b);i++)
#define FORD(i,a,b) for(int i = (a);i>=(b);i--)
#define REP(i,n) for(int i = 0;i<(n);i++)
#define rst(x,k) memset(x,k,sizeof(x))
#define lowbit(x) ((x)&(-(x)))
#define h(x) (1<<(x))
#define lson (ind<<1)
#define rson (ind<<1|1)
#define eps 1e-6
#define INF 1000000000
#define maxn 210000
#define mod 1000000007LL
using namespace std;
typedef long long LL;
char a[maxn];
struct node{
    int s[maxn<<2][26];
    void build(int l,int r,int ind){
        REP(i,26)s[ind][i] = 0;
        if(l == r){
            s[ind][a[l] - 'a'] = 1;
            return;
        }
        int mid = (l+r)>>1;
        build(l,mid,lson);
        build(mid+1,r,rson);
        REP(i,26){
            s[ind][i] = s[lson][i] + s[rson][i];
        }
    }
    void Delete(int l,int r,int ind,int k,int cc){
        s[ind][cc]--;
        if(l == r){
            a[l] = '\0';
            return;
        }
        int mid = (l+r)>>1;
        if(s[lson][cc] >= k)Delete(l,mid,lson,k,cc);
        else Delete(mid+1,r,rson,k - s[lson][cc] , cc);
    }
}seg_tree;
int n;
int main(void){
    while(EOF != scanf("%d",&n)){
        scanf("%s",a+1);
        int len = strlen(a+1);
        int tot = len * n;
        FOR(i,1,n - 1){
            FOR(j,1,len){
                a[i * len + j] = a[j];
            }
        }
        seg_tree.build(1,tot,1);
        int Q; scanf("%d",&Q);
        int x; char ss[5];
        while(Q--){
            scanf("%d%s",&x,ss);
            seg_tree.Delete(1,tot,1,x,ss[0] - 'a');
        }
        FOR(i,1,tot){
            if(a[i])printf("%c",a[i]);
        }printf("\n");
    }return 0;
}
