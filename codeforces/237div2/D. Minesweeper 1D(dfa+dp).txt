#include <iostream>   //我是沙茶....今天又写搓了。。
#include <fstream>    //递推公式还是比较好找的。。细心就可以了。。
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <queue>
#include <stack>
#include <climits>
#include <ctime>
#include <cmath>
#include <set>
#include <map>
#include <string>
#include <vector>
#include <list>
#define MAX(a,b) ((a)>(b)?(a):(b))
#define MIN(a,b) ((a)<(b)?(a):(b))
#define abs(x) ((x)>0?(x):(-(x)))
#define FOR(i,a,b) for(int i = (a);i<=(b);i++)
#define FORD(i,a,b) for(int i = (a);i>=(b);i--)
#define REP(i,n) for(int i = 0;i<(n);i++)
#define rst(x,k) memset(x,k,sizeof(x))
#define lowbit(x) ((x)&(-(x)))
//#define h(x) (1<<(x))
//#define lson (ind<<1)
//#define rson (ind<<1|1)
#define eps 1e-6
#define INF 50000000
#define maxn 101000
#define mod 1000000007LL
#define Pi acos(-1.0)
#define link fjksldfjaslkdfjas
using namespace std;
typedef long long LL;
LL dp[1000100][5];     // 0 代表无，1代表前面是雷，2代表后面是雷，3代表左右全是，4代表自己是雷
char ss[1000100];      //疯狂的dfa
void solve(void){
    ss[0] = '?';
    int len = strlen(ss);
    //printf("len is %d\n",len);
    rst(dp,0);
    dp[0][0] = dp[0][2] = 1;
    REP(i,len){
        if(ss[i] == '0'){
            dp[i+1][0] += dp[i][0];
            dp[i+1][2] += dp[i][0];
        }else if(ss[i] == '1'){
            dp[i+1][0] += dp[i][1];
            dp[i+1][2] += dp[i][1];
            dp[i+1][4] += dp[i][2];
        }else if(ss[i] == '*'){
            dp[i+1][1] += dp[i][4];
            dp[i+1][3] += dp[i][4];
            dp[i+1][4] += dp[i][4];
        }else if(ss[i] == '2'){
            dp[i+1][4] += dp[i][3];
        }
        else{
            dp[i+1][0] += dp[i][0];
            dp[i+1][2] += dp[i][0];
            dp[i+1][0] += dp[i][1];
            dp[i+1][2] += dp[i][1];
            dp[i+1][4] += dp[i][2];
            dp[i+1][1] += dp[i][4];
            dp[i+1][3] += dp[i][4];
            dp[i+1][4] += dp[i][4];
            dp[i+1][4] += dp[i][3];
        }
        FOR(j,0,4) dp[i+1][j] %= mod;
    }
    printf("%I64d\n",(dp[len][0] + dp[len][1]) % mod);
}
int main(void){
    while(~scanf("%s",ss+1)) solve();
    return 0;
}
