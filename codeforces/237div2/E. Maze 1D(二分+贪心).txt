#include <iostream>   //我是沙茶....今天又写搓了。。
#include <fstream>    //首先答案肯定是1或0,0的情况不用解释。。直接模拟一遍就能知道是不是。。
#include <cstdio>     //为什么不会比1大呢。。显然在大于0不会放两个。。因为远的那个用不着。。小于0同理
#include <cstring>    //而且也不会放一个大于0一个小于0，因为如果机器人碰不到就没有意义。。如果碰到了。。那就说明0到这个范围都不能是终点了。
#include <algorithm>  //两端都没有终点那就真的没有终点了。。所以必然只可能是0或1
#include <queue>      //0的情况好办。。一的情况进行二分就可以了。。如果当前可以。。就可以把障碍物放的远一些。。
#include <stack>
#include <climits>
#include <ctime>
#include <cmath>
#include <set>
#include <map>
#include <string>
#include <vector>
#include <list>
#define MAX(a,b) ((a)>(b)?(a):(b))
#define MIN(a,b) ((a)<(b)?(a):(b))
#define abs(x) ((x)>0?(x):(-(x)))
#define FOR(i,a,b) for(int i = (a);i<=(b);i++)
#define FORD(i,a,b) for(int i = (a);i>=(b);i--)
#define REP(i,n) for(int i = 0;i<(n);i++)
#define rst(x,k) memset(x,k,sizeof(x))
#define lowbit(x) ((x)&(-(x)))
//#define h(x) (1<<(x))
//#define lson (ind<<1)
//#define rson (ind<<1|1)
#define eps 1e-6
#define INF 50000000
#define maxn 1010000
#define mod 1000000007LL
#define Pi acos(-1.0)
#define link fjksldfjaslkdfjas
using namespace std;
typedef long long LL;
char s[maxn];
bool visit[maxn * 2];
bool judge(int mid,int len){
    rst(visit,false);
    int now = 0; visit[now + maxn] = true;
    REP(i,len-1){
        if(s[i] == 'L' && now - 1 > mid)now--;
        else if(s[i] == 'R')now++;
        visit[now + maxn] = true;
    }
    now++;
    if(visit[now + maxn])return false;
    return true;
}
void solve(void){
    rst(visit,false);
    int len = strlen(s);
    if(s[len-1] == 'L'){
        REP(i,len){
            if(s[i] == 'L')s[i] = 'R';
            else s[i] = 'L';
        }
    }
    int now = 0; visit[now + maxn] = true;
    REP(i,len-1){
        if(s[i] == 'L') now--;
        else now++;
        visit[now + maxn] = true;
    }
    if(s[len-1] == 'L') now--;
    else now++;
    if(!visit[now + maxn]){
        printf("1\n");
        return;
    }
    int ans = 0;
    int l = - len , r = -1;
    while(l <= r){
        int mid = (l+r) / 2;
        //printf("l is %d r is %d mid is %d\n",l,r,mid);
        if(judge(mid , len)){
            ans = mid;
            r = mid-1;
        }else l = mid+1;
    }
    printf("%d\n", - ans);
}
int main(void){
    while(~scanf("%s",s)) solve();
    return 0;
}
