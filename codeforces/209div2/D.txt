#include <iostream>   //‘Ÿ’Ωsplay....
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <queue>
#include <climits>
#include <ctime>
#include <cmath>
#include <set>
#define MAX(a,b) ((a)>(b)?(a):(b))
#define MIN(a,b) ((a)<(b)?(a):(b))
#define abs(x) (x)>0?(x):(-(x))
#define FOR(i,a,b) for(int i = (a);i<=(b);i++)
#define FORD(i,a,b) for(int i = (a);i>=(b);i--)
#define REP(i,n) for(int i = 0;i<(n);i++)
#define rst(x,k) memset(x,k,sizeof(x))
#define lson (ind<<1)
#define rson (ind<<1|1)
#define maxn 1000010
#define INF 100000000
#define mod 1000000007LL
using namespace std;
typedef long long LL;
int ans[maxn];
int digit[maxn];
int l[maxn],r[maxn];
int n;
int main(void)
{
    while(EOF != scanf("%d",&n))
    {
        FOR(i,1,n) scanf("%d",digit+i);
        digit[0] = digit[n+1] = -1;
        rst(l,0); rst(r,0);
        FOR(i,1,n)
        {
            int now = i-1;
            while(digit[now]>=digit[i] && digit[now]%digit[i] == 0)
            {
                l[i] += (l[now]+1);
                now -=(l[now]+1);
            }
        }
        FORD(i,n,1)
        {
            int now = i+1;
            while(digit[now]>=digit[i] && digit[now]%digit[i] == 0)
            {
                r[i] += (r[now]+1);
                now += (r[now]+1);
            }
        }
        int ans = 0;
        int num = 0;
        int last = -1;
        FOR(i,1,n)
        {
            if(ans < l[i]+r[i]+1)
            {
                ans = l[i]+r[i]+1;
                num = 1;
                last= i -l[i];
            }
            else if(ans == l[i]+r[i]+1)
            {
                if(i-l[i] == last)
                {
                    l[i] = -10000000;
                }
                else
                {
                    num++;
                    last = i - l[i];
                }
            }
        }
        printf("%d %d\n",num,ans-1);
        int tt = 0;
        FOR(i,1,n)
        {
            if(ans == l[i]+r[i]+1)
            {
                tt++;
                printf("%d%c",i-l[i],(tt==num)?'\n':' ');
            }
        }
    }
    return 0;
}
