#include <iostream>  //继续怒写LCT.....争取写到闭着眼睛就能做。。
#include <cstdio>     //写出了些手感。。。
#include <cstring>
#include <algorithm>
#include <queue>
#include <climits>
#include <ctime>
#include <cmath>
#include <set>
#include <map>
#define MAX(a,b) ((a)>(b)?(a):(b))
#define MIN(a,b) ((a)<(b)?(a):(b))
#define abs(x) (x)>0?(x):(-(x))
#define FOR(i,a,b) for(int i = (a);i<=(b);i++)
#define FORD(i,a,b) for(int i = (a);i>=(b);i--)
#define REP(i,n) for(int i = 0;i<(n);i++)
#define rst(x,k) memset(x,k,sizeof(x))
#define lowbit(x) ((x)&(-(x)))
#define lson (ind<<1)
#define rson (ind<<1|1)
#define maxn 101000
#define INF 2100001000
#define mod 1000000007LL
using namespace std;
typedef long long LL;
struct LCT{
    int son[maxn][2],fa[maxn],bef[maxn];
    int add[maxn],key[maxn];
    void INIT(void){
        rst(son,0); rst(fa,0); rst(bef,0);
        rst(add,0); rst(key,0);
    }
    inline void pushdown(int x){
        if(x && add[x]){
            int l = son[x][0], r = son[x][1];
            if(l)add[l] += add[x] , key[l] += add[x];
            if(r)add[r] += add[x] , key[r] += add[x];
            add[x] = 0;
        }
    }
    void rolate(int x,int kind){
        int y = fa[x], z = fa[y];
        pushdown(y);  pushdown(x);
        son[y][!kind] = son[x][kind];
        if(son[x][kind]) fa[son[x][kind]] = y;
        son[x][kind] = y;
        if(z) son[z][son[z][1] == y] = x;
        fa[x] = z;  fa[y] = x;
    }
    void splay(int x){
        int rt = x;  for(; fa[rt]; rt = fa[rt])   ;
        if(x != rt){
            bef[x] = bef[rt];  bef[rt] = 0;
            while(fa[x]){
                if(son[fa[x]][0] == x)
                    rolate(x,1);
                else
                    rolate(x,0);
            }
        }else{
            pushdown(x);
        }
    }
    void access(int x){
        int y = 0;
        for(; x; x = bef[x]){
            splay(x);
            fa[son[x][1]] = 0;
            bef[son[x][1]] = x;
            son[x][1] = y;
            fa[y] = x;
            bef[y] = 0;
            y = x;
        }
    }
    void change(int x,int y){
        access(y);
        for(y = 0;x ;x = bef[x]){
            splay(x);
            if(!bef[x]){
                if(son[x][1]){
                    add[son[x][1]]++;
                    key[son[x][1]]++;
                }
                if(y){
                    add[y]++;
                    key[y]++;
                }
                return;
            }
            fa[son[x][1]] = 0;
            bef[son[x][1]] = x;
            son[x][1] = y;
            fa[y] = x;
            bef[y] = 0;
            y =  x;
        }
    }
    int req(int x){
        splay(x);
        return key[x];
    }
}lct;
struct node{
    int t,nxt;
}edge[maxn<<1];
int headline[maxn],E;
int _hash[maxn];
bool visit[maxn];
void addedge(int f,int t){
    edge[E].t = t;
    edge[E].nxt = headline[f];
    headline[f] = E++;
}
void bfs(int u){
    queue<int> q;
    rst(visit,false);
    visit[u] = true;
    q.push(u);
    while(!q.empty()){
        u = q.front(); q.pop();
        for(int i = headline[u];i != -1;i = edge[i].nxt){
            int v = edge[i].t;
            if(!visit[v]){
                visit[v] = true;
                _hash[i>>1] = v;
                lct.bef[v] = u;
                q.push(v);
            }
        }
    }
}
void INIT(void){
    int n; scanf("%d",&n);
    rst(headline,-1);
    E = 0;
    lct.INIT();
    FOR(i,1,n-1){
        int a,b; scanf("%d%d",&a,&b);
        addedge(a,b);
        addedge(b,a);
    }
    bfs(1); int Q; scanf("%d",&Q);
    while(Q--){
        int a,b; scanf("%d%d",&a,&b);
        lct.change(a,b);
    }
    FOR(i,0,n-2){
        printf("%d%c",lct.req(_hash[i]),(i==n-2)?'\n':' ');
    }
}
int main(void){
    INIT();
}
