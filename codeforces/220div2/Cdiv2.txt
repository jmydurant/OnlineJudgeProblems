#include <iostream>   //我是沙茶....今天又写搓了。。
#include <cstdio>     //居然裸搜就能过？作死啊。。1000*1000怎么想都不敢搜啊。。。
#include <cstring>
#include <algorithm>
#include <queue>
#include <climits>
#include <ctime>
#include <cmath>
#include <set>
#include <map>
#include <string>
#define MAX(a,b) ((a)>(b)?(a):(b))
#define MIN(a,b) ((a)<(b)?(a):(b))
#define abs(x) ((x)>0?(x):(-(x)))
#define FOR(i,a,b) for(int i = (a);i<=(b);i++)
#define FORD(i,a,b) for(int i = (a);i>=(b);i--)
#define REP(i,n) for(int i = 0;i<(n);i++)
#define rst(x,k) memset(x,k,sizeof(x))
#define lowbit(x) ((x)&(-(x)))
#define h(x) (1<<(x))
#define lson (ind<<1)
#define rson (ind<<1|1)
#define eps 1e-6
#define INF 1000000000
#define maxn 1510000
using namespace std;
typedef long long LL;
char puzzle[1010][1010];
bool visit[1010][1010];
int ans[1010][1010];
int dx[] = {0,0,1,-1};
int dy[] = {1,-1,0,0};
int nxt[256];
int n,m;
bool circle;
inline bool judge(int _x,int _y){
    if(_x >= 1 && _x <= n && _y >= 1 && _y <= m)return true;
    return false;
}
void dfs(int x,int y,int word){
    if(circle)return;
    if(ans[x][y] != -1)return;
    visit[x][y] = true;
    int misaka = nxt[word];
    ans[x][y] = 1;
    int maxr = 0;
    REP(i,4){
        int xx = x + dx[i] , yy = y + dy[i];
        if(judge(xx,yy) && puzzle[xx][yy] == misaka){
            if(visit[xx][yy]){
                circle = true;
                return;
            }
            if(ans[xx][yy] == -1)dfs(xx,yy,misaka);
            maxr = MAX(maxr,ans[xx][yy]);
        }
    }
    ans[x][y] += maxr;
    visit[x][y] = false;
}
void solve(void){
    FOR(i,1,n) scanf("%s",puzzle[i] + 1);
    rst(visit,false);
    rst(ans,-1);
    circle = false;
    int res = 0;
    FOR(i,1,n){
        FOR(j,1,m){
            if(puzzle[i][j] == 'D'){
                if(ans[i][j] == -1)dfs(i,j,'D');
                res = MAX(ans[i][j],res);
            }
        }
    }
    if(circle){
        printf("Poor Inna!\n");
        return ;
    }
    if(res < 4){
        printf("Poor Dima!\n");
        return ;
    }
    printf("%d\n",res / 4);
}
int main(void){
    nxt['D'] = 'I';
    nxt['I'] = 'M';
    nxt['M'] = 'A';
    nxt['A'] = 'D';
    while(2 == scanf("%d%d",&n,&m))solve();
    return 0;
}
