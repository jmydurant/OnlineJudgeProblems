#include <cstdio>   //把格子染成黑白相间的。。然后相邻的黑白都会有一条边。。然后就可以匹配了。。
#include <cstring> // wa了N次。。不想活了。。。哭。。。
#include <cmath>
#include <iostream>
#include <algorithm>
#include <vector>
#define INF 100000000
#define mod 1000000007LL
#define MAXN 100000
#define eps  1e-3
#define abs(x) ((x)>0?(x):(-(x)))
#define link fadsfasdfasf
using namespace std;
typedef long long LL;

struct node
{
    int t;
    int nxt;
}edge[MAXN];
char puzzle[100][100];
int headline[5000];
int tot;
int row,col;
bool visit[5000];
int link[5000];
int dx[] = {0,0,1,-1};
int dy[] = {1,-1,0,0};
int square;
void add(int u,int v)
{
    edge[tot].t = v;
    edge[tot].nxt = headline[u];
    headline[u] = tot;
    tot++;
}

bool dfs(int u)
{
    for(int i = headline[u];i != -1; i=edge[i].nxt)
    {
        int j = edge[i].t;
        if(!visit[j])
        {
            visit[j] = true;
            if(link[j] == -1 || dfs(link[j]))
            {
                link[j] = u;
                return true;
            }
        }
    }
    return false;
}

int Hungary(void)
{
    memset(link,-1,sizeof(link));
    int ans = 0;
    for(int i = 0;i<row;i++)
    {
        for(int j = 0;j<col;j++)
        {
            if(((i+j)&1) && puzzle[i][j] == '#')
            {
                memset(visit,false,sizeof(visit));
                if(dfs(i*col+j))
                    ans++;
                else
                    return -1;
            }
        }
    }
    return ans*2;
}

int main(void)
{
    while(2==scanf("%d%d",&row,&col))
    {
        if(row == 0 && col == 0)
            break;
        for(int i = 0;i<row;i++)
            scanf("%s",puzzle[i]);
        square = 0;
        tot = 0;
        memset(headline,-1,sizeof(headline));
        for(int i = 0;i<row;i++)
        {
            for(int j = 0;j<col;j++)
            {
                if(puzzle[i][j] == '#')
                {
                    square++;
                    if((i+j)&1)
                    for(int k = 0;k<4;k++)
                    {
                        int x = i+dx[k];
                        int y = j+dy[k];
                        if(x>=0 && x<row && y>=0 && y<col && puzzle[x][y] == '#')
                        {
                            add(i*col+j,x*col+y);
                            //printf("%d   %d\n",i*col+j,x*col+y);
                        }
                    }
                }
            }
        }
        if(square&1)
        {
            printf("IMPOSSIBLE\n\n");
            continue;
        }
        int ans = Hungary();
        if(ans == square)
            printf("POSSIBLE\n\n");
        else
            printf("IMPOSSIBLE\n\n");
    }
}
