#include<cstdio>     //这题比较奇葩。。。（好多题目都很奇葩）。。精髓不在并查集的使用。。因为是个人都看出来了。。关键在于三角关系。。
#include<iostream>   //我们设relation[i]为i与他的祖先（父亲）的关系。。0代表同类。。1代表他吃父亲。。2代表父亲吃他。。
#include<cstring>    //然后就是精髓了。。。当父亲更新到祖先之后（父亲那边的关系都打理好了）。。那么儿子和祖先有这样的关系
#include<climits>   //relation[son]=(relation[son]+relation[fa])%3;神奇吧。。。这个可以画一个矢量关系就能得到。。
#include<stack>      //然后以后所有的关系都在围绕这个式子做文章。。。每次做的也只是更新这个关系（因为祖先老是改变）。。。
#include<map>
#define MAX(a,b)  ((a)>(b)?(a):(b))
#define MIN(a,b)  ((a)<(b)?(a):(b))
#define abs(a) ((a)>0?(a):(-(a)))
using namespace std;
int fa[50010],relation[50010];
int N;
void IINT(void)
{
    for(int i=1;i<=N;i++)
    {
        fa[i]=i;
        relation[i]=0;
    }
}
int findfa(int x)
{
    if(fa[x]==x)return x;
    else
    {
        int tmpt=fa[x];
        fa[x]=findfa(fa[x]);
        relation[x]=(relation[x]+relation[tmpt])%3;
    }
    return fa[x];
}
void unionfa(int d,int x,int y)
{
    int fx=findfa(x),fy=findfa(y);
    if(fx==fy)return;
    else
    {
        fa[fx]=fy;
        relation[fx]=(relation[y]-relation[x]+3+d)%3;
    }
    return;
}
bool judge(int d,int x,int y)
{
    int fx,fy;
    if(x>N || y>N ||(x==y && d==2))return false;
    fx=findfa(x);fy=findfa(y);
    if(fx!=fy)return true;
    else if(relation[x]==(3+relation[y]+d-1)%3)return true;
    return false;
}
int main(void)
{
    int Q;
    while(2==scanf("%d%d",&N,&Q))
    {
        int ans=0;
        IINT();
        for(int i=1;i<=Q;i++)
        {
            int op,x,y;
            scanf("%d%d%d",&op,&x,&y);
            if(judge(op,x,y))
            {
                unionfa(op-1,x,y);
            }
            else
            {
                ans++;
            }
        }
        printf("%d\n",ans);
    }
    return 0;
}



