#include<cstring>     //还是一个染色问题。。因为颜色多了。。所以不能用二进制了。。。
#include<algorithm>   //最后用了个map。。。因为墙实在是太长了。。。如果把所有砖块都开成数组估计直接超。。所以就把信的坐标给处理成相对坐标。。。
#include<cmath>      //反正可以降低空间开销。。但是。。还是有bug的。。相对关系就没办法来处理一下极端情况。。。比如1 3,6 10,1 10；这组数据就挂了。。
#include<cstdio>
#include<map>
using namespace std;
struct Node
{
    int left,right,mid;
    int color;
}tree[500000];
int c[10010];
int a[10010],b[10010];
int value[20040];
map<int,int>zuobiao;
void build_tree(int x,int y,int num)
{
    tree[num].left=x;
    tree[num].right=y;
    tree[num].mid=(x+y)>>1;
    tree[num].color=0;
    int middle=(x+y)>>1;
    if(x==y)return ;
    build_tree(x,middle,num<<1);
    build_tree(middle+1,y,num<<1|1);
}
void change_tree(int x,int y,int num,int paints)
{
    if(tree[num].left==x&&tree[num].right==y)
    {
        tree[num].color=paints;
        return ;
    }
    int middle=tree[num].mid;
    if(tree[num].color!=-1)
    {
        tree[num<<1].color=tree[num].color;
        tree[num<<1|1].color=tree[num].color;
        tree[num].color=-1;
    }
    if(y<=middle)change_tree(x,y,num<<1,paints);
    else if(x>middle)change_tree(x,y,num<<1|1,paints);
    else
    {
        change_tree(x,middle,num<<1,paints);
        change_tree(middle+1,y,num<<1|1,paints);
    }
}
void req_tree(int x,int y,int num)
{
    if(tree[num].color!=-1)
    {
        c[tree[num].color]=1;
        return ;
    }
    int middle=tree[num].mid;
    if(y<=middle)
    {
        req_tree(x,y,num<<1);
    }
    else if(x>middle)
    {
        req_tree(x,y,num<<1|1);
    }
    else
    {
        req_tree(x,middle,num<<1);
        req_tree(middle+1,y,num<<1|1);
    }
}
int main(void)
{
    int casenum;
    scanf("%d",&casenum);
    while(casenum--)
    {
        int N;scanf("%d",&N);
        zuobiao.clear();
        memset(value,0,sizeof(value));
        memset(a,0,sizeof(a));
        memset(b,0,sizeof(b));
        memset(c,0,sizeof(c));
        int h=0;
        for(int i=1;i<=N;i++)
        {
            scanf("%d%d",a+i,b+i);
            value[h++]=a[i];
            value[h++]=b[i];
        }
        sort(value,value+h);
        int zz=1;
        for(int i=0;i<h;i++)
        {
            if(0==zuobiao[value[i]])
            {
                zuobiao[value[i]]=zz;
                zz++;
            }
        }
        zz--;
        build_tree(1,zz,1);
        for(int i=1;i<=N;i++)
        {
            change_tree(zuobiao[a[i]],zuobiao[b[i]],1,i);
        }
        req_tree(1,zz,1);
        int result=0;
        for(int i=1;i<=N;i++)
        {
            if(c[i])result++;
        }
        printf("%d\n",result);
    }
    return 0;
}
