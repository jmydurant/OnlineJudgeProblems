#include<cstdio>     //尼玛。。这道dp好蛋疼。。分的情况多到令人发指。。我还有什么可说的呢。。。次奥次奥次奥！！！
#include<cstring>     //解析见下面。。我就不多说什么了。。还是得感谢这些无私的大神提供思路啊。。。。
#include<algorithm>   //还有。。要注意把dp设成奶牛的个数。。不要设成围栏的状态。。否则肯定超空间。。。
#include<deque>
#include<climits>
#define INF 0x0f0f0f0f
using namespace std;
int dp[1010][1010][4];
struct point
{
    int x,y;
}cow[1010];
bool cmp(point a,point b){return a.x<b.x;}
inline int MIN(int a,int b,int c,int d)
{
    if(a>b)a=b;
    if(a>c)a=c;
    if(a>d)a=d;
    return a;
}
int main(void)
{
    int N,K,B;
    while(3==scanf("%d%d%d",&N,&K,&B))
    {
        for(int i=1;i<=N;i++)
        {
            scanf("%d%d",&cow[i].y,&cow[i].x);
        }
        sort(cow+1,cow+N+1,cmp);
        memset(dp,INF,sizeof(dp));cow[0].x=0;
        if(N>=2&&cow[1].x==cow[2].x)
        {
            dp[1][1][0]=dp[2][1][0]=2;
            dp[1][2][3]=dp[2][2][3]=2;
        }
        else
        {
            dp[1][1][0]=dp[1][2][3]=2;
            dp[1][1][cow[1].y]=1;
        }
        for(int k=1;k<=K;k++)
        {
            for(int i=1;i<=N;i++)
            {
                int j,t;
                if(k<2)j=INF;
                else
                {
                    j=MIN(dp[i-1][k-2][0],dp[i-1][k-2][1],dp[i-1][k-2][2],dp[i-1][k-2][3]);
                }
                t=MIN(dp[i-1][k-1][0],dp[i-1][k-1][1],dp[i-1][k-1][2],dp[i-1][k-1][3]);
                dp[i][k][0] = min(dp[i][k][0], min(dp[i - 1][k][0] + 2 * (cow[i].x - cow[i - 1].x),t + 2));
                dp[i][k][3]=min(dp[i][k][3],MIN(dp[i-1][k][3]+2*(cow[i].x-cow[i-1].x),dp[i-1][k-1][1]+cow[i].x-cow[i-1].x+1,dp[i-1][k-1][2]+cow[i].x-cow[i-1].x+1,j+2));
                if(i+1<=N&&cow[i].x==cow[i+1].x)
                {
                    dp[i+1][k][0]=dp[i][k][0];
                    dp[i+1][k][3]=dp[i][k][3];
                    i++;
                }
                else if(1==cow[i].y)
                {
                    dp[i][k][1]=min(dp[i][k][1],MIN(dp[i-1][k][1]+cow[i].x-cow[i-1].x,t+1,dp[i-1][k][3]+cow[i].x-cow[i-1].x,INF));
                }
                else
                {
                    dp[i][k][2]=min(dp[i][k][2],MIN(dp[i-1][k][2]+cow[i].x-cow[i-1].x,t+1,dp[i-1][k][3]+cow[i].x-cow[i-1].x,INF));
                }
            }
        }
        int result=MIN(dp[N][K][0],dp[N][K][1],dp[N][K][2],dp[N][K][3]);
        printf("%d\n",result);
    }
    return 0;
}
//
/* 
f[i][j][1] 前i只牛，放到j个barn中, j是上行 
f[i][j][2] 前i只牛，放到j个barn中, j是下行 
f[i][j][3] 前i只牛，放到j个barn中, j是双行 
f[i][j][4] 前i只牛，放到j个barn中，j是单行但双barn 
 
如果i和i+1在同一列 
    f[i+1][j][1] = f[i+1][j][2] = INF; 
    f[i+1][j][0] = min( 
        f[i-1][j][0]+2*(cow[i].x-cow[i-1].x),  
        f[i-1][j-1][0..3]+2) 
    f[i+1][j][3] = min( 
        f[i-1][j][3]+2*(cow[i].x-cow[i-1].x),  
        f[i-1][j-1][1]+cow[i].x-cow[i-1].x +1,  
        f[i-1][j-1][2]+cow[i].x-cow[i-1].x +1, 
        f[i-1][j-2][0..3]+2) 
如果i在上行 
    f[i][j][1] = min( 
        f[i-1][j][1]+cow[i].x-cow[i-1].x,  
        f[i-1][j][3]+cow[i].x-cow[i-1].x +1, 
        f[i-1][j-1][0..3]+1) 
    f[i][j][2] = INF 
    f[i][j][0] 同上 
    f[i][j][3] 同上 
如果i在下行 
    f[i][j][2] = min( 
        f[i-1][j][2]+cow[i].x-cow[i-1].x,  
        f[i-1][j][3]+cow[i].x-cow[i-1].x +1, 
        f[i-1][j-1][0..3]+1) 
    f[i][j][1] = INF 
    其他同上 
     
初值赋的很暴力，先把所有设为无效 
再枚举几种可能出现的初值做基础，没想到的反正也无效的... 
其实状态1,2可以何为一个 
http://hi.baidu.com/creamxcream/blog/item/d1288a8e93f5cdf7513d9237.html 
这个跑的很快32MS 
*/  