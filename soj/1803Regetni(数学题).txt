#include<cstdio>    //解析见下。。思路大概是这样。。我做的稍微复杂了点。。。用的是dfs搜的。。。
#include<climits>
#include<algorithm>
#include<cstring>
#include<queue>
#include<cstdlib>
#include<cmath>
#include<stack>
#include<map>
#include<vector>
#define abs(a)  ((a)>0?(a):(-(a)))
#define MAX(a,b) ((a)>(b)?(a):(b))
#define MIN(a,b) ((a)<(b)?(a):(b))
#define INF -0x0f0f0f0f
#define lowbit(a) (a)^(-(a))
using namespace std;
int dx[]={0,1,0,1};
int dy[]={0,0,1,1};
int N;
long long ans=0;
long long num[4];
long long now[4];
int state[4];
long long C(long long n,long long k)
{
    if(k==0)return 1;
    if(k==1)return n;
    if(k==2)return n*(n-1)/2LL;
    return n*(n-1)*(n-2)/6LL;
}
void dfs(int sum,int k)
{
    if(sum>3 || k>3)return;
    if(sum==3)
    {
        //printf("%d %d %d pass\n",state[1],state[2],state[3]);
        int tmpt=dx[state[1]]*dy[state[2]]+dx[state[2]]*dy[state[1]]+dx[state[1]]*dy[state[3]]+dx[state[3]]*dy[state[1]]+dx[state[2]]*dy[state[3]]+dx[state[3]]*dy[state[2]];
        if(0==tmpt%2)
        {
            //printf("pass");
            long long abc=C(num[state[1]],now[state[1]]);
            if(state[1]!=state[2])
            {
                abc*=C(num[state[2]],now[state[2]]);
            }
            if(state[2]!=state[3])
            {
                abc*=C(num[state[3]],now[state[3]]);
            }
            ans+=abc;
        }
        return ;
    }
    sum++;
    if(now[k]+1<=num[k])
    {
        now[k]++;
        state[sum]=k;
        dfs(sum,k);
        now[k]--;
    }
    dfs(sum-1,k+1);
}
int main(void)
{
    int casenum; scanf("%d",&casenum);
    int iCase=1;
    while(casenum--)
    {
        scanf("%d",&N);
        memset(num,0,sizeof(num));
        memset(now,0,sizeof(now));
        for(int i=1;i<=N;i++)
        {
            int p,q;
            scanf("%d%d",&p,&q);
            if((!(p&1)) && (!(q&1)))
            {
                num[0]++;
            }
            else if((p&1) && (!(q&1)))
            {
                num[1]++;
            }
            else if((!(p&1)) && (q&1))
            {
                num[2]++;
            }
            else
            {
                num[3]++;
            }
        }
        ans=0;
        dfs(0,0);
        printf("Scenario #%d:\n",iCase);
        printf("%lld\n\n",ans);
        iCase++;
    }
    return 0;
}
A=|x1y2 - y1x2 + x2y3 - y2x3 + x3y1 - y3x1|/2 
Try to make clever use of this formula.

先开始怎么想都没有头绪，后来瞄了一眼discuss，有人说其实每个点的坐标只对2的模数有意义。。就有点思路了

总的方法数是C（n，3），再减去不满足情况的

变形：y1*(x3-x2)+y2*(x1-x3)+y3*(x2-x1)

不满足情况的是奇+奇+奇……（1）

                         奇+偶+偶……（2）

（1）将式子以x整理的话，发现变成了偶+偶+偶，因此是不可能成立的

（2）总结出来4种不满足的情况：

         （0，0）  （0，1） （1，0）

         （0，0）  （0，1）  （1，1）

         （0，0）  （1，0）  （1，1）

          （0，1）  （1，0）  （1，1）

就把整个问题变成o（n)的复杂度了~~~~