#include<cstdio>    //这应该是我第一次用spfa。。因为这个方法其实并不难。。但是居然可以用在这题上面。。好奇葩。。
#include<cstring>    //spfa的精髓。。。经过松弛的时候。。发现某个点已经不再松弛了。。就不要把那个点加入队列了。。。
#include<algorithm>
#include<deque>
#include<climits>
#define INF 0x0f0f0f0f
using namespace std;
int path[110][110];
char puzzle[110][110];
int atack[110][110];
int dx[]={0,0,1,-1};
int dy[]={1,-1,0,0};
int N,HP;
typedef pair<int,int> point;
int main(void)
{
    while(2==scanf("%d%d",&N,&HP))
    {
        getchar();
        for(int i=0;i<N;i++)gets(puzzle[i]);
        if('.'!=puzzle[0][0]||'.'!=puzzle[N-1][N-1]){printf("Die..\n");continue;}
        memset(atack,0,sizeof(atack));
        memset(path,-1,sizeof(path));
        for(int i=0;i<N;i++)
        {
            for(int j=0;j<N;j++)
            {
                int k;
                if('.'==puzzle[i][j])continue;
                if('G'==puzzle[i][j])k=1;
                else if('M'==puzzle[i][j])k=2;
                else k=3;
                int h=2*k-1;
                for(int p=i-1;p>=i-k;p--)
                {
                    if(p<0)break;
                    atack[p][j]+=h;
                }
                for(int p=i+1;p<=i+k;p++)
                {
                    if(p>=N)break;
                    atack[p][j]+=h;
                }
                for(int p=j-1;p>=j-k;p--)
                {
                    if(p<0)break;
                    atack[i][p]+=h;
                }
                for(int p=j+1;p<=j+k;p++)
                {
                    if(p>=N)break;
                    atack[i][p]+=h;
                }
            }
        }
        path[0][0]=atack[0][0];
        deque<point>q;
        q.push_back(point(0,0));
        while(!q.empty())
        {
            point tmpt=q.front();
            q.pop_front();
            for(int i=0;i<4;i++)
            {
                int x=tmpt.first+dx[i],y=tmpt.second+dy[i];
                if(x>=N||y>=N||x<0||y<0)continue;
                if('.'!=puzzle[x][y])continue;
                if(-1==path[x][y]||path[x][y]>path[tmpt.first][tmpt.second]+atack[x][y])
                {
                    path[x][y]=path[tmpt.first][tmpt.second]+atack[x][y];
                    q.push_back(point(x,y));
                }
            }
        }
        if(-1!=path[N-1][N-1]&&path[N-1][N-1]<HP)printf("Girl~\n");
        else printf("Die..\n");
    }
    return 0;
}

