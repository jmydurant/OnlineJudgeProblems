#include<cstdio>   //解析见下。。
#include<climits>
#include<algorithm>
#include<cstring>
#include<queue>
#include<cstdlib>
//#include<cmath>
#include<stack>
#include<map>
#include<vector>
#define abs(a)  ((a)>0?(a):(-(a)))
#define MAX(a,b) ((a)>(b)?(a):(b))
#define MIN(a,b) ((a)<(b)?(a):(b))
#define INF -0x0f0f0f0f
#define lowbit(a) ((a)&(-(a)))
#define MAXN 1001000
#define esp 1e-8
using namespace std;
struct point
{
    double x,y;
}p[220];
struct line
{
    point a,b;
}l[110];
int N;
int zero(double a)
{
    if(abs(a)<esp)
        return 0;
    if(a>0)
        return 1;
    else
        return -1;
}
double det(double x1,double y1,double x2,double y2)
{
    return x1*y2-x2*y1;
}
double cross(point a,point b,point c)
{
    return det((b.x-a.x),(b.y-a.y),(c.x-a.x),(c.y-a.y));
}
bool judge(void)
{
    for(int i=1;i<=2*N-1;i++)
    {
        for(int j=i+1;j<=2*N;j++)
        {
            if(0==zero(p[i].x-p[j].x) && 0==zero(p[i].y-p[j].y))
                continue;
            bool ok=true;
            for(int k=1;k<=N;k++)
            {
                int f1=zero(cross(p[i],l[k].a,p[j]));
                int f2=zero(cross(p[i],l[k].b,p[j]));
                if(f1*f2>0)
                {
                    ok=false;
                    break;
                }
            }
            if(ok)
            {
                return 1;
            }
        }
    }
    return 0;
}
int main(void)
{
    int casenum; scanf("%d",&casenum);
    while(casenum--)
    {
        scanf("%d",&N);
        int tot=0;
        for(int i=1;i<=N;i++)
        {
            tot++;
            scanf("%lf%lf",&p[tot].x,&p[tot].y);
            l[i].a=p[tot];
            tot++;
            scanf("%lf%lf",&p[tot].x,&p[tot].y);
            l[i].b=p[tot];
        }
        if(judge())
        {
            printf("Yes!\n");
        }
        else
        {
            printf("No!\n");
        }
    }
    return 0;
}
题意：给出若干条线段，若存在一条直线，使所有的线段的投影到这条直线上，都有公共点（至少一个）,那么就输出yes，如果不存在则输出no

假如存在这条直线，那么经过投影的公共点与这条直线垂直的直线必和所有的线段相交。原题可以转化为求直线与线段相交的问题。因为投影在直线有公共区域，公共区域的范围一定是所有线段的端点的其中两个端点所投影成的两个极端，只要找到这两个端点，并连成直线，直线就可以串插所有的线段。

