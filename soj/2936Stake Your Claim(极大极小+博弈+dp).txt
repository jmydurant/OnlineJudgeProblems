#include <iostream>   //我是沙茶....今天又写搓了。。
#include <fstream>    //一个极大极小博弈。。用dp来记录状态。。三进制。。具体程序很好懂。。我的最佳状态是所以子状态中你最弱的。。
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <queue>
#include <stack>
#include <climits>
#include <ctime>
#include <cmath>
#include <set>
#include <map>
#include <string>
#include <vector>
#include <list>
#define MAX(a,b) ((a)>(b)?(a):(b))
#define MIN(a,b) ((a)<(b)?(a):(b))
#define abs(x) ((x)>0?(x):(-(x)))
#define FOR(i,a,b) for(int i = (a);i<=(b);i++)
#define FORD(i,a,b) for(int i = (a);i>=(b);i--)
#define REP(i,n) for(int i = 0;i<(n);i++)
#define rst(x,k) memset(x,k,sizeof(x))
#define lowbit(x) ((x)&(-(x)))
#define h(x) (1<<(x))
//#define lson (ind<<1)
//#define rson (ind<<1|1)
#define eps 1e-6
#define INF 50000000
#define maxn 101000
#define mod 1000000007LL
#define Pi acos(-1.0)
#define link fjksldfjaslkdfjas
using namespace std;
typedef long long LL;
int n ,p[11] , tot;
char puzzle[10][10];
bool visit[10][10];
int dp[60000] , ans , link , cap;
struct node{
    int x,y;
    node(int _x = 0 , int  _y = 0){x = _x , y = _y;}
    void INIT(int _x = 0 , int  _y = 0){x = _x , y = _y;}
}pp[11] , bestp;
int dx[] = {1,-1,0,0};
int dy[] = {0,0,1,-1};
void INIT(void){
    p[0] = 1;
    FOR(i,1,10) p[i] = p[i-1] * 3;
}
inline bool judge(int x,int y,char c){
    if(x > 0 && x <= n && y > 0 && y <= n && visit[x][y] == false && puzzle[x][y] == c)return true;
    return false;
}
void dfs(int x,int y){
    visit[x][y] = true;
    link++;
    REP(k,4){
        int tx = x + dx[k] , ty = y + dy[k];
        if(judge(tx,ty,puzzle[x][y]))dfs(tx,ty);
    }
}
int cal(void){
    rst(visit,false);
    int x1 = 0 , x2 = 0;
    FOR(i,1,n)FOR(j,1,n){
        link = 0;
        if(!visit[i][j])dfs(i,j);
        if(puzzle[i][j] == '0') x1 = MAX(x1 , link);
        else x2 = MAX(x2 , link);
    }
    return x1 - x2;
}
int findmax(int,int,int);
int findmin(int,int,int);
int findmax(int used,int deep,int state){  // used 代表那些点被用了。。 state代表3进制状态
    if(dp[state] != -INF)return dp[state];
    if(used == cap){
        dp[state] = cal();
        return dp[state];
    }
    int res = -INF;
    REP(i,tot){
        if(!(h(i) & used)){
            puzzle[pp[i].x][pp[i].y] = '0';
            int tt = findmin(used | h(i) , deep+1 , state + p[i]);
            puzzle[pp[i].x][pp[i].y] = '.';
            res = MAX(tt , res);
            if(deep == 0){
                if(tt > ans || (tt == ans && (pp[i].x < bestp.x || (pp[i].x == bestp.x && pp[i].y < bestp.y)))){
                    ans = tt;
                    bestp = pp[i];
                }
            }
        }
    }
    dp[state] = res;
    return dp[state];
}
int findmin(int used,int deep,int state){
    if(dp[state] != -INF)return dp[state];
    if(used == cap){
        dp[state] = cal();
        return dp[state];
    }
    int res = INF;
    REP(i,tot){
        if(!(h(i) & used)){
            puzzle[pp[i].x][pp[i].y] = '1';
            int tt = findmax(used | h(i) , deep+1 , state + 2 * p[i]);
            puzzle[pp[i].x][pp[i].y] = '.';
            res = MIN(tt , res);
        }
    }
    dp[state] = res;
    return dp[state];
}
void solve(void){
    FOR(i,1,n) scanf("%s",puzzle[i] + 1);
    int x1 = 0,x2 = 0;
    tot = 0;
    FOR(i,1,n)FOR(j,1,n){
        if(puzzle[i][j] == '.'){
            pp[tot].INIT(i,j); tot++;
        }else if(puzzle[i][j] == '0')x1++;
        else x2++;
    }
    if(x1 > x2){
        FOR(i,1,n)FOR(j,1,n){
            if(puzzle[i][j] == '0')puzzle[i][j] = '1';
            else if(puzzle[i][j] == '1')puzzle[i][j] = '0';
        }
    }
    REP(i,p[tot])dp[i] = -INF;
    ans = -INF; cap = (h(tot) - 1);
    findmax(0,0,0);
    printf("(%d,%d) %d\n",bestp.x - 1,bestp.y - 1,ans);
}
int main(void){
    INIT();
    while(EOF != scanf("%d",&n) && n) solve();
    return 0;
}
