#include<iostream>   //很少的自己完全自主解决的DP。。很爽。。确实很爽。。。
#include<cstring>    //来解释一下意思吧。。dp(i,j,b)i代表走到第i天。。j表示包括第i天。之前一直保持的状态。。b=0代表一直错。。1代表一直对。。
#include<algorithm>   //good(i,b)记录到第i天。。以这种状态结尾的最大好天气数。。。然后递推就可以了。。。
#include<cmath>      //然后二进制表示天气。。1代表好天。。然后就能用求和运算计算好天数了。。
#include<cstdio>
#include<climits>
#define MAX(a,b)  ((a)>(b)?(a):(b))
#define INF 0x7f7f7f7f
using namespace std;
int dp[1010][60][2];
int good[1010][2];
int sum[1010];
int digit[1010];
char day[1010];
int main(void)
{
    int casenum;scanf("%d",&casenum);
    while(casenum--)
    {
        int R,W;
        scanf("%d%d",&R,&W);
        memset(sum,0,sizeof(sum));
        memset(dp,0,sizeof(dp));
        memset(good,0,sizeof(good));
        getchar();
        gets(day);
        int N=strlen(day);
        for(int i=0;i<N;i++)
        {
            if('G'==day[i])digit[i+1]=1;
            else digit[i+1]=0;
        }
        for(int i=1;i<=N;i++)sum[i]=sum[i-1]+digit[i];
        //for(int i=1;i<=N;i++)printf("%d\n",sum[i]);
        for(int i=1;i<=N;i++)
        {
            for(int k=1;k<=R;k++)
            {
                if(i>=k)
                {
                    dp[i][k][1]=good[i-k][0]+sum[i]-sum[i-k];
                    if(good[i][1]<dp[i][k][1])good[i][1]=dp[i][k][1];
                }
            }
            for(int k=1;k<=W;k++)
            {
                if(i>=k)
                {
                    dp[i][k][0]=good[i-k][1]+k-sum[i]+sum[i-k];
                    if(good[i][0]<dp[i][k][0])good[i][0]=dp[i][k][0];
                }
            }
        }
        printf("%d\n",MAX(good[N][0],good[N][1]));
    }
    return 0;
}
