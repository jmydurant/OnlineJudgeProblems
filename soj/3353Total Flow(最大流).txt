#include <cstdio>     //非常裸的最大流。。。现在已经稍微掌握了最简单的增广路算法。。。
#include <cstring> 
#include <queue>
#define MAX(a,b) ((a)>(b)?(a):(b))
#define MIN(a,b) ((a)<(b)?(a):(b))
#define MAXN 100
#define MAXV 100100
#define INF 0x7f7f7f7f
using namespace std;

int n;
int puzzle[MAXN][MAXN];
int s,e;
int cap;
int path[MAXN],flow[MAXN];
queue<int> q;

int bfs(void)
{
    while(!q.empty())q.pop();
    memset(path,-1,sizeof(path));
    path[s] = 0; flow[s] = INF;
    q.push(s);
    while(!q.empty())
    {
        int temp = q.front();
        q.pop();
        if(temp == e)
            break;
        for(int i = 1;i<=cap;i++)
        {
            if(i != s && path[i] == -1 && puzzle[temp][i])
            {
                path[i] = temp;
                flow[i] = MIN(flow[temp],puzzle[temp][i]);
                q.push(i);
            }
        }
    }
    if(path[e] == -1)
        return -1;
    return flow[e];
}

int Edmonds_Karp(void)
{
    int ans = 0;
    int step;
    while((step = bfs()) != -1)
    {
        ans += step;
        int now = e,pre;
        while(now != s)
        {
            pre = path[now];
            puzzle[now][pre] += step;
            puzzle[pre][now] -= step;
            now = pre;
        }
    }
    return ans;
}

int main(void)
{
    while(EOF!=scanf("%d",&n))
    {
        memset(puzzle,0,sizeof(puzzle));
        for(int i = 1;i<=n;i++)
        {
            char a[10],b[10];
            int c;
            scanf("%s%s%d",a,b,&c);
            puzzle[a[0]-'A'+1][b[0]-'A'+1] += c;
        }
        s = 1,e = 26,cap = 58;
        printf("%d\n",Edmonds_Karp());
    }
    return 0;
}
