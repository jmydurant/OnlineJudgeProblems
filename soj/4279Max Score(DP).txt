#include<cstring>    //很挫的一个DP。。反正就是从上往下慢慢推理就可以了。。时间好像只是ONM^2
#include<cstdio>
#include<climits>
#include<algorithm>
#include<queue>
#include<cstdlib>
#include<cmath>
#include<stack>
#include<map>
#include<vector>
#define abs(a)  ((a)>0?(a):(-(a)))
#define MAX(a,b) ((a)>(b)?(a):(b))
#define MIN(a,b) ((a)<(b)?(a):(b))
#define INF -1000000000000LL
#define MOD 1000003LL
#define lowbit(a) (a)^(-(a))
using namespace std;
long long dp[1010][55];
long long left[1010][55],right[1010][55];
long long sum[1010][55];
long long digit[1010][55];
int main(void)
{
    int casenum; scanf("%d",&casenum);
    while(casenum--)
    {
        int row,col; scanf("%d%d",&row,&col);
        for(int i=1;i<=row;i++)
        {
            sum[i][0]=0;
            for(int j=1;j<=col;j++)
            {
                scanf("%lld",&digit[i][j]);
                sum[i][j]=digit[i][j]+sum[i][j-1];
            }
            left[i][1]=digit[i][1];
            for(int j=2;j<=col;j++)
            {
                left[i][j]=MAX(left[i][j-1],0LL)+digit[i][j];
            }
            right[i][col]=digit[i][col];
            for(int j=col-1;j>0;j--)
            {
                right[i][j]=MAX(right[i][j+1],0LL)+digit[i][j];
            }
        }
        for(int i=1;i<=row;i++)
            for(int j=1;j<=col;j++)dp[i][j]=INF;
        dp[1][1]=right[1][1];dp[1][col]=left[1][col];
        for(int i=2;i<col;i++)
        {
            long long a=MAX(right[1][i+1],0LL);
            long long b=MAX(left[1][i-1],0LL);
            dp[1][i]=a+b+digit[1][i];
        }
        for(int i=2;i<=row;i++)
        {
            for(int j=1;j<=col;j++)
            {
                for(int k=1;k<=col;k++)
                {
                    long long a,b,c;
                    if(j<k)
                    {
                        if(j==1)a=0;
                        else a=MAX(left[i][j-1],0LL);
                        if(k==col)b=0;
                        else b=MAX(right[i][k+1],0LL);
                        c=sum[i][k]-sum[i][j-1];
                    }
                    else
                    {
                        if(k==1)a=0;
                        else a=MAX(left[i][k-1],0LL);
                        if(j==col)b=0;
                        else b=MAX(right[i][j+1],0LL);
                        c=sum[i][j]-sum[i][k-1];
                    }
                    dp[i][j]=MAX(dp[i][j],a+b+c+dp[i-1][k]);
                }
            }
        }
        long long ans=INF;
        for(int i=1;i<=row;i++)
        {
            for(int j=1;j<=col;j++)
            {
                ans=MAX(ans,dp[i][j]);
            }
        }
        printf("%lld\n",ans);
    }
    return 0;
}
 