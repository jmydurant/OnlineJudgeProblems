#include<cstdio>     //状态转移好TM的难。。。次奥。。。最下面有详细解释。。。理解倒是不太难。。但是写起来很蛋疼。。。
#include<cstring>
#define INF 10000000000LL
#define MAX(a,b) ((a)>(b)?(a):(b))
#define MIN(a,b) ((a)<(b)?(a):(b))
using namespace std;
typedef long long LL;
LL a[1010][2];
LL sum[1010];
LL dp[1010][1010][5];
int N,M,K;
void solve1(void)
{
    sum[0]=0;
    for(int i=1;i<=N;i++)scanf("%lld",&a[i][0]);
    for(int i=1;i<=N;i++)sum[i]=sum[i-1]+a[i][0];
    dp[1][1][0]=a[1][0];
    for(int i=2;i<=N;i++)dp[i][1][0]=MAX(dp[i-1][1][0]+sum[i]-sum[i-1],sum[i]-sum[i-1]);
    for(int i=2;i<=N;i++)dp[i][1][0]=MAX(dp[i-1][1][0],dp[i][1][0]);
    for(int k=2;k<=K;k++)
    {
        dp[k][k][0]=sum[k];
        for(int i=k+1;i<=N;i++)
        {
            dp[i][k][0]=dp[i-1][k][0];
            for(int j=i-1;j>=k-1;j--)
            {
                dp[i][k][0]=MAX(dp[i][k][0],dp[j][k-1][0]+sum[i]-sum[j]);
            }
        }
        for(int i=k+1;i<=N;i++)
        {
            dp[i][k][0]=MAX(dp[i][k][0],dp[i-1][k][0]);
        }
    }
    printf("%lld\n",dp[N][K][0]);
}
void solve2(void)
{
    memset(sum,0,sizeof(sum));
    for(int i=0;i<=N;i++)
    {
        for(int j=0;j<=K;j++)
        {
            for(int l=0;l<5;l++)
            {
                dp[i][j][l]=-INF;
            }
        }
    }
    for(int i=1;i<=N;i++)
    {
        for(int j=0;j<2;j++)
        {
            scanf("%lld",&a[i][j]);
            sum[i]+=a[i][j];
        }
    }
    dp[1][1][0]=dp[1][2][1]=sum[1];
    dp[1][1][2]=a[1][0];
    dp[1][1][3]=a[1][1];
    dp[1][0][4]=0;
    for(int i=2;i<=N;i++)
    {
        for(int j=0;j<=K;j++)
        {
            dp[i][j][0]=MAX(dp[i][j][0],dp[i-1][j][0]+sum[i]);
            dp[i][j][1]=MAX(dp[i][j][1],dp[i-1][j][1]+sum[i]);
            dp[i][j][2]=MAX(dp[i][j][2],MAX(dp[i-1][j][1],dp[i-1][j][2])+a[i][0]);
            dp[i][j][3]=MAX(dp[i][j][3],MAX(dp[i-1][j][1],dp[i-1][j][3])+a[i][1]);
            if(j>0)dp[i][j][1]=MAX(dp[i][j][1],MAX(dp[i-1][j-1][2],dp[i-1][j-1][3])+sum[i]);
            for(int L=0;L<5;L++)
            {
                if(j>=2)dp[i][j][1]=MAX(dp[i][j][1],dp[i-1][j-2][L]+sum[i]);
                if(j>0)
                {
                    dp[i][j][0]=MAX(dp[i][j][0],dp[i-1][j-1][L]+sum[i]);
                    dp[i][j][2]=MAX(dp[i][j][2],dp[i-1][j-1][L]+a[i][0]);
                    dp[i][j][3]=MAX(dp[i][j][3],dp[i-1][j-1][L]+a[i][1]);
                }
                dp[i][j][4]=MAX(dp[i][j][4],dp[i-1][j][L]);
            }
        }
    }
    LL ans=-INF;
    for(int i=0;i<5;i++)
    {
        if(ans<dp[N][K][i])ans=dp[N][K][i];
    }
    printf("%lld\n",ans);
}
int main(void)
{
    while(3==scanf("%d%d%d",&N,&M,&K))
    {
        if(M==1)solve1();
        else solve2();
    }
}
解题： 对于m=1，就是一唯的求k段最大子序列
对于m=2，分成5种状态：
1.上下都选而且上下是属于同一矩形的（状态编码为0）；
2.上下都选但属于两个不同矩形的（状态编码为1）；
3.只选上面的（状态为2）；
4.只选下面的（状态为3）；
5.不选
然后转移就行了。