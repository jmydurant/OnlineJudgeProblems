#include<cstring>   //搓死了。。。真是蛋疼。。。还是说明一下吧。。如果一个状态中的0代表这个地方的砖块是来自上面一行的或者是自己横着放。。
#include<cstdio>    //1当然就是竖着放了。。。check函数检验这个state是否有连续个偶数个1.。。其他就是很简单的了。。因为最后一行不能竖着放
#include<climits>   //所以now【0】就是答案。。。
#include<algorithm>
#include<queue>
#include<cstdlib>
#include<cmath>
#include<stack>
#include<map>
#include<vector>
#define abs(a)  ((a)>0?(a):(-(a)))
#define MAX(a,b) ((a)>(b)?(a):(b))
#define MIN(a,b) ((a)<(b)?(a):(b))
#define INF 0x0f0f0f0f
#define MOD 1000003LL
#define lowbit(a) (a)^(-(a))
using namespace std;
long long now[1<<11];
long long next[1<<11];
int row,col;
bool check(int state)
{
    int tmpt=state;
    //if(0==(tmpt&3))return false;
    while(1)
    {
        if((tmpt&1)==0)tmpt>>=1;
        else if((tmpt&1) && 0==(tmpt&2))return false;
        else tmpt>>=2;
        if(0==tmpt)return true;
    }
}
int main(void)
{
    while(2==scanf("%d%d",&row,&col) && (row || col))
    {
        if(0==row || 0==col || ((row*col)%2))
        {
            printf("%d\n",0);
            continue;
        }
        memset(now,0,sizeof(now));
        int state=(1<<col);
        for(int i=0;i<state;i++)
        {
            if(check(state-1-i))now[i]=1;
        }
        for(int abc=2;abc<=row;abc++)
        {
            memset(next,0,sizeof(next));
            for(int i=0;i<state;i++)
            {
                for(int j=0;j<state;j++)
                {
                    if(now[j] && 0==(i&j) && check(state-1-(i|j)))
                    {
                        next[i]+=now[j];
                    }
                }
            }
            memcpy(now,next,sizeof(now));
        }
        printf("%lld\n",now[0]);
    }
    return 0;
}
