#include<cstring>   //终于用原嘉的剪枝方法过了。。。超时已经不能阻止我过题了。。。他大爷的。。
#include<cstdio>    //这个剪枝有点贪心思想。。。先把剩下的字母过滤一遍。。。用两个数组记录需求。。对于需要大的字母的。。就把最大的字母依次给他。
#include<climits>   //当不能满足是。。直接跳出。。。好爽。。。多谢原嘉神。。我还得继续猛练。。明天就转战poj了。。。
#include<queue>
#include<cstdlib>
#include<cmath>
#include<stack>
#include<map>
#define abs(a)  ((a)>0?(a):(-(a)))
#define MAX(a,b) ((a)>(b)?(a):(b))
#define MIN(a,b) ((a)<(b)?(a):(b))
#define INF 0x0f0f0f0f
#define MOD 19871118LL
#define lowbit(a) (a)^(-(a))
using namespace std;
int alph[30],info[250],ans[250];
char S[250];
int len;
bool flag;
bool check(int now)
{
    int state[30];
    memcpy(state,alph,sizeof(alph));
    int left[30],right[30];
    memset(left,0,sizeof(left));
    memset(right,0,sizeof(right));
    for(int i=now;i<len;i++)
    {
        if(info[i])
        {
            int tmpt=S[i]-'a';
            left[tmpt+1]++;
        }
        else
        {
            int tmpt=S[i]-'a';
            right[tmpt-1]++;
        }
    }
   // for(int i=0;i<26;i++)printf("%d ",left[i]);printf("\n");
    int pos=25;
    while(0==left[pos] && pos>=0)
    {
        pos--;
    }
    for(int i=25;i>=0;i--)
    {
        if(pos>i)return false;
        if(pos<0)break;
        while(state[i]>0)
        {
            if(left[pos]>0)
            {
                left[pos]--;
                state[i]--;
            }
            if(left[pos]<=0)
            {
                while(0==left[pos] && pos>=0)pos--;
            }
            if(pos<0)break;
        }
        if(pos<0)break;
    }
    pos=0;
    while(0==right[pos] && pos<=25)
    {
        pos++;
    }
    for(int i=0;i<=25;i++)
    {
        if(pos<i)return false;
        if(pos>25)break;
        while(state[i]>0)
        {
            if(right[pos]>0)
            {
                right[pos]--;
                state[i]--;
            }
            if(right[pos]<=0)
            {
                while(0==right[pos] && pos<=25)pos++;
            }
            if(pos>25)break;
        }
        if(pos>25)break;
    }
    return true;
}
void dfs(int now)
{
    if(flag)return;
    if(now>=len)
    {
        flag=true;
        return;
    }
    if(!check(now))return;
    if(1==info[now])
    {
        int tmpt=S[now]-'a';
        for(int i=tmpt+1;i<26;i++)
        {
            if(alph[i]>0)
            {
                ans[now]=i;
                alph[i]--;
                dfs(now+1);
                if(flag)return;
                alph[i]++;
            }
        }
    }
    else
    {
        int tmpt=S[now]-'a';
        for(int i=0;i<tmpt;i++)
        {
            if(alph[i]>0)
            {
                ans[now]=i;
                alph[i]--;
                dfs(now+1);
                if(flag)return;
                alph[i]++;
            }
        }
    }
}
int main(void)
{
    while(1==scanf("%s",S))
    {
        len=strlen(S);
        for(int i=0;i<len;i++)
        {
            scanf("%d",info+i);
        }
        for(int i=0;i<26;i++)
        {
            scanf("%d",alph+i);
        }
        bool ok=false;
        for(int i=0;i<len;i++)
        {
            if(S[i]=='z' && info[i]==1)
            {
                printf("Never pass CET4!\n");
                ok=true;
                break;
            }
            if(S[i]=='a' && info[i]==0)
            {
                printf("Never pass CET4!\n");
                ok=true;
                break;
            }
        }
        if(ok)continue;
        //printf("pass\n");
        //for(int i=0;i<26;i++)printf("%d",right[i]);printf("\n");
        flag=false;
        dfs(0);
        if(flag)
        {
            for(int i=0;i<len;i++)
            {
                printf("%c",ans[i]+'a');
            }
            printf("\n");
        }
        else
        {
            printf("Never pass CET4!\n");
        }
    }
    return 0;
}
