#include <cstdio>   //先找出主链。。全部主链上面的点都标记出来。。然后对分链上面的点怒DP之。。。
#include <cstring>
#define MAX(a,b) ((a)>(b)?(a):(b))
#define maxn 1010
using namespace std;

struct node
{
    int t,nxt;
    int w;
}edge[maxn];
int tot;
int headline[maxn];
bool visit[maxn];
int dp[maxn][maxn];
int n,m;
int l[maxn];
int ans,dis;
void add(int f,int t,int w)
{
    edge[tot].t = t;
    edge[tot].w = w;
    edge[tot].nxt = headline[f];
    headline[f] = tot++;
}
void INIT(void)
{
    tot = 0; ans = 0; dis = 0;
    memset(headline,-1,sizeof(headline));
    memset(visit,false,sizeof(visit));
    memset(l,0,sizeof(l));
}

bool dfs(int u,int fa)
{
    bool flag = false;
    int son;
    if(u == n)
    {
        flag = true;
        son = n;
        ans += l[u];
        visit[u] = true;
    }
    for(int i = headline[u];i != -1;i = edge[i].nxt)
    {
        int v = edge[i].t;
        if(v != fa)
        {
            if(dfs(v,u))
            {
                flag = true;
                son = v;
                ans += l[u];
                dis += edge[i].w;
                visit[u] = true;
            }
        }
    }
    if(flag)
    {
        for(int i = headline[u];i != -1;i = edge[i].nxt)
        {
            int v = edge[i].t;
            if(v != son)
            {
                add(0,v,edge[i].w);
                add(v,0,edge[i].w);
            }
        }
    }
    return flag;
}

void dyn(int u)
{
    visit[u] = true;
    for(int i = 0;i<=m;i++)
    {
        dp[u][i] = l[u];
    }
    for(int i = headline[u];i != -1;i = edge[i].nxt)
    {
        int v = edge[i].t;
        if(!visit[v])
        {
            dyn(v);
            for(int j = m;j>=0;j--)
            {
                for(int k = 0;k<=j-edge[i].w;k++)
                {
                    dp[u][j] = MAX(dp[u][j],dp[u][j-edge[i].w-k]+dp[v][k]);
                }
            }
        }
    }
}

int main(void)
{
    while(2 == scanf("%d%d",&n,&m))
    {
        INIT();
        for(int i = 1;i<n;i++)
        {
            int a,b,c;
            scanf("%d%d%d",&a,&b,&c);
            add(a,b,c);
            add(b,a,c);
        }
        for(int i = 1;i<=n;i++)
        {
            scanf("%d",l+i);
        }
        dfs(1,-1);
        if(dis>m)
        {
            puts("Help!!!");
        }
        else if(dis == m)
        {
            printf("%d\n",ans);
        }
        else
        {
            m = (m-dis)/2;
            dyn(0);
            printf("%d\n",ans+dp[0][m]);
        }
    }
    return 0;
}
