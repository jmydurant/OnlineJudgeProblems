#include <iostream>   //类似于那种贪心的做法。。。每次做的时候尽量想让下面的可承受值最大。。并且质量越小越好。。
#include <cstdio>
#include <cstring>
#include <queue>
#include <algorithm>
#include <stack>
#include <deque>
#include <climits>
#include <cmath>
#define MAX(a,b) ((a)>(b)?(a):(b))
#define MIN(a,b) ((a)<(b)?(a):(b))
#define FOR(i,a,b) for(int i = (a);i<=(b);i++)
#define FORD(i,a,b) for(int i = (a);i>=(b);i--)
#define REP(i,n)  for(int i = 0;i<(n);i++)
#define maxn 2010
#define rst(x,k) memset(x,k,sizeof(x))
#define INF 1000010000
#define mod 1000000007LL
#define h(i,j) (i*col+j)
#define eps 1e-10
using namespace std;
typedef long long LL;
int dp[maxn];
struct node
{
    int c,v;
    bool operator < (const node & temp)const
    {
        return c+v<temp.c+temp.v;     //贪心的排序。。。
    }
}box[maxn];
int n;

int main(void)
{
    while(EOF != scanf("%d",&n))
    {
        REP(i,n) scanf("%d",&box[i].v);
        REP(i,n) scanf("%d",&box[i].c);
        sort(box,box+n);
        rst(dp,0);
        int ans = 0;
        REP(i,n)
        {
            if(box[i].c >= dp[ans])
            {
                dp[ans+1] = dp[ans]+box[i].v;
                ans++;
            }
            FORD(j,ans,0)
            {
                if(box[i].c>=dp[j] && box[i].v+dp[j]<dp[j+1])
                    dp[j+1] = dp[j]+box[i].v;
            }
        }
        printf("%d\n",ans);
    }
    return 0;
}
