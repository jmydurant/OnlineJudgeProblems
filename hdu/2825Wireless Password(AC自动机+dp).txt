#include <cstdio>             //用vs2012写的感觉好爽。。。
#include <cstring>        //主要思想如下 dp[i][j][k]表示i长度j结尾状态为k的种数。然后对于能转移的状态p则dp[i][p][state] += dp[i-1][j][k]
#include <algorithm>
#include <queue>
#include <iostream>
#include <climits>
#include <cmath>
#define  REP(i,n) for(int i = 0;i<(n);i++)
#define  FOR(i,a,b) for(int i = (a);i<=(b);i++)
#define  FORD(i,a,b) for(int i = (a);i>=(b);i--)
#define  rst(x,k) memset(x,k,sizeof(x))
#define  h(x) (1<<(x))
#define  maxn 110
#define  mod 20090717
#define  ni 10330176681277348905LL
#define  INF 100000000
#define  base 26
using namespace  std;
typedef unsigned long long LL;
struct node{
	int fail,end;
	int nxt[26];
	void INIT(void){
		fail = end = 0;
		rst(nxt,0);
	}
}tree[maxn];
int tot,n,m,lim;
int _hash[h(10)];
void Insert(char *s,int _pos){
	int now = 0;
	for(; *s;s++){
		int c = *s - 'a';
		if(tree[now].nxt[c] == 0){
			tot++; tree[tot].INIT();
			tree[now].nxt[c] = tot;
		}
		now = tree[now].nxt[c];
	}
	tree[now].end |= h(_pos);
}
void bfs(void){
	int now = 0;
	queue<int> q; q.push(0);
	while(!q.empty()){
		now = q.front(); q.pop();
		REP(i,base){
			if(tree[now].nxt[i]){
				int temp = tree[now].nxt[i];
				if(now){
					tree[temp].fail = tree[tree[now].fail].nxt[i];
				}
				q.push(temp);
				tree[temp].end |= tree[tree[temp].fail].end;
			}else tree[now].nxt[i] = tree[tree[now].fail].nxt[i];
		}
	}
}
void INIT(void){
	rst(_hash,0);
	REP(i,h(10)){
		int tt = i;
		while (tt){
			if(tt & 1)_hash[i]++;
			tt >>= 1;
		}
	}
}
char s[25];
int dp[26][maxn][h(10)];
void solve(void){
	tot = 0; tree[0].INIT();
	REP(i,m){
		scanf("%s",s);
		Insert(s,i);
	}
	bfs();
	//printf("tot is %d\n",tot);
	//FOR(i,0,tot)printf("end %d is %d\n",i,tree[i].end);
	FOR(i,0,n){
		FOR(j,0,tot) memset(dp[i][j],0,sizeof(int)*(1<<m));
	}
	dp[0][0][0] = 1;
	FOR(i,1,n){
		FOR(j,0,tot){
			int top = h(m);
			REP(k,top){
				if(dp[i-1][j][k] && (k & tree[j].end) == tree[j].end){
					REP(ii,base){
						int temp = tree[j].nxt[ii];
						dp[i][temp][tree[temp].end | k] += dp[i-1][j][k];
						if(dp[i][temp][tree[temp].end | k] >= mod)dp[i][temp][tree[temp].end | k] -= mod;
					}
				}
			}
		}
	}
	int ans = 0;
	FOR(i,0,tot){
		REP(j,h(m)){
			if(_hash[j] >= lim){
				ans += dp[n][i][j];
				if(ans >= mod)ans -= mod;
			}
		}
	}
	printf("%d\n",ans);
}
int main(void){
	INIT();
	while(3 == scanf("%d%d%d",&n,&m,&lim) && n)solve();
}