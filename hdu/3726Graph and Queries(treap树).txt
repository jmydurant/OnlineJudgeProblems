#include <iostream>    //不用指针写了300行之后华丽的MLE了。while(true)puts("去死");
#include <cstdio>   //去死去死去死去死去死去死去死去死去死去死去死去死去死去死去死
#include <cstring>  //你绝对不知道我调这个程序调了4个小时
#include <algorithm>//发疯了。。快点Ａ掉不然疯了。。待会还要用splay再写一遍求不要再烦我了
#include <queue>
#include <climits>
#include <ctime>
#include <cmath>
#define MAX(a,b) ((a)>(b)?(a):(b))
#define MIN(a,b) ((a)<(b)?(a):(b))
#define abs(x) (x)>0?(x):(-(x))
#define FOR(i,a,b) for(int i = (a);i<=(b);i++)
#define FORD(i,a,b) for(int i = (a);i>=(b);i--)
#define REP(i,n) for(int i = 0;i<(n);i++)
#define rst(x,k) memset(x,k,sizeof(x))
using namespace std;
typedef long long LL;
struct node
{
    node *son[2];
    int fix,key;
    int s;
    node(int _key = 0)
    {
        key = _key;
        son[0] = son[1] = NULL;
        fix = rand();
        s = 1;
    }
};
node *root[21000];
int w[21000],fr[61000],to[61000],fa[21000];
bool die[61000];
long long reqtime = 0, reqvalue = 0;
struct command
{
    char op;
    int X,K;
    command(char _op = '\0',int _X = 0,int _K = 0){op = _op,X = _X,K = _K;}
}C[510000];

void cleartree(node* &x)
{
    if(x->son[0] != NULL) cleartree(x->son[0]);
    if(x->son[1] != NULL) cleartree(x->son[1]);
    delete x;
    x = NULL;
}

void update(node* &x)
{
    x->s = 1;
    if(x->son[0] != NULL) x->s += x->son[0]->s;
    if(x->son[1] != NULL) x->s += x->son[1]->s;
}

void ro_l(node* &x)  //左旋--ZAG
{
    node *y = x->son[1];
    x->son[1] = y->son[0];
    y->son[0] = x;
    update(x);
    update(y);
    x = y;
}

void ro_r(node* &x)  //右旋--ZIG
{
    node *y = x->son[0];
    x->son[0] = y->son[1];
    y->son[1] = x;
    update(x);
    update(y);
    x = y;
}

void Insert(node* &x,int key)  //插入。。。
{
    if(x == NULL)
    {
        x = new node(key);
    }
    else
    {
        if(x->key>key)
        {
            Insert(x->son[0],key);
            if(x->son[0]->fix > x->fix)
                ro_r(x);
        }
        else
        {
            Insert(x->son[1],key);
            if(x->son[1]->fix > x->fix)
                ro_l(x);
        }
    }
    update(x);
}

void Delete(node* &x,int key)  //删除。。。
{
    if(x->key == key)
    {
        if(x->son[0] != NULL && x->son[1] != NULL)
        {
            if(x->son[0]->fix > x->son[1]->fix)
            {
                ro_r(x);
                Delete(x->son[1],key);
            }
            else
            {
                ro_l(x);
                Delete(x->son[0],key);
            }
        }
        else if(x->son[0] != NULL)
        {
            node *temp = x;
            x = x->son[0];
            delete temp;
        }
        else if(x->son[1] != NULL)
        {
            node *temp = x;
            x = x->son[1];
            delete temp;
        }
        else
        {
            delete x;
            x = NULL;
        }
    }
    else
    {
        if(x->key>key)
            Delete(x->son[0],key);
        else
            Delete(x->son[1],key);
    }
    if(x != NULL)
        update(x);
}

void Merge(node* &root1,node* &root2)   //把root1的节点全部接到root2中....
{
    if(root1->son[0] != NULL) Merge(root1->son[0],root2);
    if(root1->son[1] != NULL) Merge(root1->son[1],root2);
    Insert(root2,root1->key);
    delete root1;
    root1 = NULL;
}

int Find(int x)
{
    if(x != fa[x])
        fa[x] = Find(fa[x]);
    return fa[x];
}

void add(int i)
{
    int x = fr[i], y = to[i];
    int fx = Find(x), fy = Find(y);
    if(fx != fy)
    {
        if(root[fx]->s > root[fy]->s)
        {
            fa[fy] = fx;
            Merge(root[fy],root[fx]);
        }
        else
        {
            fa[fx] = fy;
            Merge(root[fx],root[fy]);
        }
    }
}

void changew(int i,int key)
{
    int fi = Find(i);
    Delete(root[fi],w[i]);
    Insert(root[fi],key);
    w[i] = key;
}

int FINDK(node* &x,int k)
{
    if(x == NULL || k > x->s || k<=0) return 0;
    int sr = (x->son[1] == NULL) ? 0 : x->son[1]->s;
    if(sr+1 == k) return x->key;
    if(sr+1 < k) return FINDK(x->son[0],k-sr-1);
    return FINDK(x->son[1],k);
}

void pitree(node* x,int kind)
{
    if(x == NULL) return;
    printf("(");
    pitree(x->son[0],kind);
    if(kind == 1)printf("%d",x->key);
    else printf("%d",x->s);
    pitree(x->son[1],kind);
    printf(")");
}

int n,m;
int Q;
int main(void)
{
    int iCase = 0;
    srand(time(0));
    while(2 == scanf("%d%d",&n,&m))
    {
        if(n == 0 && m == 0)return 0;
        rst(die,false);
        FOR(i,1,n) scanf("%d",w+i);
        FOR(i,1,m) scanf("%d%d",fr+i,to+i);
        Q = 0;
        while(true)
        {
            char op; int X,K;
            scanf(" %c",&op);
            if(op == 'E')break;
            if(op == 'D')
            {
                scanf("%d",&X);die[X] = true;
            }
            else if(op == 'Q')
            {
                scanf("%d%d",&X,&K);
            }
            else
            {
                scanf("%d%d",&X,&K);
                int temp = w[X];
                w[X] = K;
                K = temp;
            }
            C[++Q] = command(op,X,K);
        }
        FOR(i,1,n)
        {
            fa[i] = i;
            if(root[i] != NULL) cleartree(root[i]);
            root[i] = new node(w[i]);
        }
        FOR(i,1,m)
        {
            if(!die[i])add(i);
        }
        //FOR(i,1,n) pitree(root[i],1),printf("\n");
        //FOR(i,1,n) pitree(root[i],2),printf("\n");
        reqtime = 0; reqvalue = 0;
        FORD(i,Q,1)
        {
            if(C[i].op == 'D')
                add(C[i].X);
            else if(C[i].op == 'Q')
            {
                reqtime++;
                //printf("%lf\n",ttt);
                reqvalue += FINDK(root[Find(C[i].X)],C[i].K);;
            }
            else
            {
                changew(C[i].X,C[i].K);
            }
        }
        printf("Case %d: %.6lf\n",++iCase,(double)reqvalue/reqtime);
    }
    return 0;
}
