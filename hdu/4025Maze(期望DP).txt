#include<cstdio>     //题目稍微有点难。。。公式得自己推导。。。解析见下
#include<climits>
#include<algorithm>
#include<cstring>
#include<queue>
#include<cstdlib>
#include<cmath>
#include<stack>
#include<map>
#include<vector>
#define abs(a)  ((a)>0?(a):(-(a)))
#define MAX(a,b) ((a)>(b)?(a):(b))
#define MIN(a,b) ((a)<(b)?(a):(b))
#define INF 1000000000000LL
#define lowbit(a) (a)^(-(a))
using namespace std;
double k[10010],e[10010];
double A[10010],B[10010],C[10010];
vector<int> v[10010];
int N;
bool dfs(int now,int fa)
{
    if(v[now].size()==1 && fa!=-1)
    {
        A[now]=k[now];
        B[now]=(1.0-k[now]-e[now]);
        C[now]=(1.0-k[now]-e[now]);
        return true;
    }
    A[now]=k[now];
    B[now]=(1.0-k[now]-e[now])/((double)v[now].size());
    C[now]=(1.0-k[now]-e[now]);
    double tmpt=0.0;
    int t_size=v[now].size();
    for(int i=0;i<t_size;i++)
    {
        if(v[now][i]==fa)continue;
        if(!dfs(v[now][i],now))return false;
        A[now]+=A[v[now][i]]*B[now];
        tmpt+=B[v[now][i]]*B[now];
        C[now]+=C[v[now][i]]*B[now];
       //printf("%lf pass\n",C[2]);
    }
    if(abs(1.0-tmpt)<1e-10)return false;
    A[now]/=(1.0-tmpt);
    B[now]/=(1.0-tmpt);
    C[now]/=(1.0-tmpt);
    return true;
}
int main(void)
{
    int casenum; scanf("%d",&casenum);
    int iCase=1;
    while(iCase<=casenum)
    {
        scanf("%d",&N);
        memset(k,0,sizeof(k));
        memset(e,0,sizeof(e));
        memset(A,0,sizeof(A));
        memset(B,0,sizeof(B));
        memset(C,0,sizeof(C));
        for(int i=1;i<=N;i++)
            v[i].clear();
        for(int i=1;i<N;i++)
        {
            int m,n;
            scanf("%d%d",&m,&n);
            v[m].push_back(n);
            v[n].push_back(m);
        }
        for(int i=1;i<=N;i++)
        {
            scanf("%lf%lf",k+i,e+i);
            k[i]/=100.0;
            e[i]/=100.0;
        }
        printf("Case %d: ",iCase);
        if(dfs(1,-1) && abs(A[1]-1.0)>1e-10)
        {
            printf("%lf\n",C[1]/(1.0-A[1]));
        }
        else
        {
            printf("impossible\n");
        }
        iCase++;
    }
}
void Debug(void)
{
    for(int i=1;i<=N;i++)
    {
        printf("%lf  %lf  %lf\n",A[i],B[i],C[i]);
    }
}
    dp求期望的题。 
    题意： 
    有n个房间，由n-1条隧道连通起来，实际上就形成了一棵树， 
    从结点1出发，开始走，在每个结点i都有3种可能： 
        1.被杀死，回到结点1处（概率为ki） 
        2.找到出口，走出迷宫 （概率为ei） 
        3.和该点相连有m条边，随机走一条 
    求：走出迷宫所要走的边数的期望值。 
     
    设 E[i]表示在结点i处，要走出迷宫所要走的边数的期望。E[1]即为所求。 
     
    叶子结点： 
    E[i] = ki*E[1] + ei*0 + (1-ki-ei)*(E[father[i]] + 1); 
         = ki*E[1] + (1-ki-ei)*E[father[i]] + (1-ki-ei); 
     
    非叶子结点：（m为与结点相连的边数） 
    E[i] = ki*E[1] + ei*0 + (1-ki-ei)/m*( E[father[i]]+1 + ∑( E[child[i]]+1 ) ); 
         = ki*E[1] + (1-ki-ei)/m*E[father[i]] + (1-ki-ei)/m*∑(E[child[i]]) + (1-ki-ei); 
     
    设对每个结点：E[i] = Ai*E[1] + Bi*E[father[i]] + Ci; 
     
    对于非叶子结点i，设j为i的孩子结点，则 
    ∑(E[child[i]]) = ∑E[j] 
                   = ∑(Aj*E[1] + Bj*E[father[j]] + Cj) 
                   = ∑(Aj*E[1] + Bj*E[i] + Cj) 
    带入上面的式子得 
    (1 - (1-ki-ei)/m*∑Bj)*E[i] = (ki+(1-ki-ei)/m*∑Aj)*E[1] + (1-ki-ei)/m*E[father[i]] + (1-ki-ei) + (1-ki-ei)/m*∑Cj; 
    由此可得 
    Ai =        (ki+(1-ki-ei)/m*∑Aj)   / (1 - (1-ki-ei)/m*∑Bj); 
    Bi =        (1-ki-ei)/m            / (1 - (1-ki-ei)/m*∑Bj); 
    Ci = ( (1-ki-ei)+(1-ki-ei)/m*∑Cj ) / (1 - (1-ki-ei)/m*∑Bj); 
     
    对于叶子结点 
    Ai = ki; 
    Bi = 1 - ki - ei; 
    Ci = 1 - ki - ei; 
     
    从叶子结点开始，直到算出 A1,B1,C1; 
     
    E[1] = A1*E[1] + B1*0 + C1; 
    所以 
    E[1] = C1 / (1 - A1); 
    若 A1趋近于1则无解... 