#pragma comment(linker, "/STACK:1024000000,1024000000")   //粘贴神奇代码..
#include <iostream>  //继续怒写树链剖分。。。
#include <cstdio>    //写一个树状数组版本的..区间修改。。求点值
#include <cstring>
#include <algorithm>
#include <queue>
#include <climits>
#include <ctime>
#include <cmath>
#include <set>
#include <map>
#define MAX(a,b) ((a)>(b)?(a):(b))
#define MIN(a,b) ((a)<(b)?(a):(b))
#define abs(x) (x)>0?(x):(-(x))
#define FOR(i,a,b) for(int i = (a);i<=(b);i++)
#define FORD(i,a,b) for(int i = (a);i>=(b);i--)
#define REP(i,n) for(int i = 0;i<(n);i++)
#define rst(x,k) memset(x,k,sizeof(x))
#define lowbit(x) ((x)&(-(x)))
#define lson (ind<<1)
#define rson (ind<<1|1)
#define maxn 100100
#define INF 2000000000
#define mod 1000000007LL
using namespace std;
typedef long long LL;
struct node
{
    int t,nxt;
}edge[maxn*2];
int E,cnt,headline[maxn];
int son[maxn],fa[maxn],top[maxn],deep[maxn],s[maxn],_hash[maxn];
int w[maxn];   //记录开始数量
int c[maxn];   //树状数组....
void add(int f,int t)
{
    E++;
    edge[E].t = t;
    edge[E].nxt = headline[f];
    headline[f] = E;
}
void dfs(int u,int _fa,int _dp)
{
    son[u] = -1; fa[u] = _fa;
    deep[u] = _dp;
    s[u] = 1;
    for(int i = headline[u];i != -1;i = edge[i].nxt)
    {
        int v = edge[i].t;
        if(v != _fa)
        {
            dfs(v,u,_dp+1);
            s[u] += s[v];
            if(son[u] == -1 || s[v] > s[son[u]])
                son[u] = v;
        }
    }
}
void dfn(int u,int sp)
{
    top[u] = sp;
    cnt++; _hash[u] = cnt;
    if(son[u] == -1) return;
    dfn(son[u],sp);
    for(int i = headline[u];i != -1;i = edge[i].nxt)
    {
        int v = edge[i].t;
        if(v != fa[u] && v != son[u])
        {
            dfn(v,v);
        }
    }
}
void update(int pos,int v)
{
    while(pos <= cnt)
    {
        c[pos] += v;
        pos += lowbit(pos);
    }
}
int req_(int pos)
{
    int ans = 0;
    while(pos>0)
    {
        ans += c[pos];
        pos -= lowbit(pos);
    }
    return ans;
}
void change(int u,int v,int value)
{
    int f1 = top[u], f2 = top[v];
    while(f1 != f2)
    {
        if(deep[f1] < deep[f2])
        {
            swap(f1,f2);
            swap(u,v);
        }
        update(_hash[f1],value);
        update(_hash[u]+1,-value);
        u = fa[f1]; f1 = top[u];
    }
    if(deep[u] > deep[v]) swap(u,v);
    update(_hash[u],value);
    update(_hash[v]+1, -value);
}

void INIT(void)
{
    E = cnt = 0;
    rst(headline,-1);
    rst(c,0);
}
int n,m,Q;
int main(void)
{
    while(3 == scanf("%d%d%d",&n,&m,&Q))
    {
        INIT();
        FOR(i,1,n) scanf("%d",w+i);
        FOR(i,1,n-1)
        {
            int a,b; scanf("%d%d",&a,&b);
            add(a,b);
            add(b,a);
        }
        dfs(1,1,0);
        dfn(1,1);
        //printf("cnt  is %d\n",cnt);
        FOR(i,1,n)
        {
            update(_hash[i],w[i]);
            update(_hash[i]+1, -w[i]);
        }
        while(Q--)
        {
            char op[10];
            scanf("%s",op);
            if(op[0] == 'Q')
            {
                int a; scanf("%d",&a);
                printf("%d\n",req_(_hash[a]));
            }
            else
            {
                int a,b,x; scanf("%d%d%d",&a,&b,&x);
                if(op[0] == 'D') x = -x;
                change(a,b,x);
            }
        }
    }
    return 0;
}
