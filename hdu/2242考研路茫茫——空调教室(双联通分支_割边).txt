#include <iostream>   //我是沙茶....今天又写搓了。。
#include <fstream>    //这是一种对付割边的方法。。重边很讨厌。。
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <queue>
#include <stack>
#include <climits>
#include <ctime>
#include <cmath>
#include <set>
#include <map>
#include <string>
#include <vector>
#include <list>
#include <utility>
#define MAX(a,b) ((a)>(b)?(a):(b))
#define MIN(a,b) ((a)<(b)?(a):(b))
#define abs(x) ((x)>0?(x):(-(x)))
#define FOR(i,a,b) for(int i = (a);i<=(b);i++)
#define FORD(i,a,b) for(int i = (a);i>=(b);i--)
#define REP(i,n) for(int i = 0;i<(n);i++)
#define rst(x,k) memset(x,k,sizeof(x))
#define lowbit(x) ((x)&(-(x)))
#define h(x) (1<<(x))
#define lson (ind<<1)
#define rson (ind<<1|1)
#define eps 1e-8
#define INF 500000000
#define maxn 11000
#define mod 1000000007LL
#define Pi acos(-1.0)
#define link fjksldfjaslkdfjas
using namespace std;
typedef long long LL;
struct node{
    int t,nxt;
}edge[maxn << 3];
int headline[maxn] , E;
inline void add(int f,int t){
    edge[E].t = t;
    edge[E].nxt = headline[f];
    headline[f] = E++;
}
int a[maxn] , n , m;
int dfn[maxn] , low[maxn] , visit[maxn] , tot , alla;
int res;
void tarjan(int u ,int fa){
    dfn[u] = low[u] = ++tot;
    visit[u] = 1;
    for(int i = headline[u];~i;i = edge[i].nxt){
        int v = edge[i].t;
        if(!dfn[v]){
            tarjan(v , u);
            low[u] = MIN(low[u] , low[v]);
            if(low[v] > dfn[u]){
                int tt = alla - a[v];
                tt = abs(tt - a[v]);
                res = MIN(tt , res);
            }
        }else if(dfn[v] < dfn[u]){
            int tt = 0;
            for(int i = headline[u];~i;i = edge[i].nxt){
                if(edge[i].t == v)tt++;
            }
            if(tt >= 2 || v != fa){
                low[u] = MIN(low[u] , dfn[v]);
            }
        }
    }
    a[fa] += a[u];
    visit[u] = 2;
}
void solve(void){
    rst(headline,-1); E = 0;
    alla = 0;
    REP(i,n) scanf("%d",a+i) , alla += a[i];
    REP(i,m){
        int x,y; scanf("%d%d",&x,&y);
        add(x , y); add(y , x);
    }
    res = INF;
    rst(dfn,0); rst(visit,0);
    tarjan(0,-1);
    if(res == INF)printf("impossible\n");
    else printf("%d\n",res);
}
int main(void){
    while(2 == scanf("%d%d",&n,&m)) solve();
    return 0;
}
