#include <iostream>  //继续怒写LCT.....争取写到闭着眼睛就能做。。
#include <cstdio>     //写出了些手感。。。
#include <cstring>    //我感觉这个题目就能作为模板了。。既有改变树值的活动。。又有link和cut.
#include <algorithm>
#include <queue>
#include <climits>
#include <ctime>
#include <cmath>
#include <set>
#include <map>
#define MAX(a,b) ((a)>(b)?(a):(b))
#define MIN(a,b) ((a)<(b)?(a):(b))
#define abs(x) (x)>0?(x):(-(x))
#define FOR(i,a,b) for(int i = (a);i<=(b);i++)
#define FORD(i,a,b) for(int i = (a);i>=(b);i--)
#define REP(i,n) for(int i = 0;i<(n);i++)
#define rst(x,k) memset(x,k,sizeof(x))
#define lowbit(x) ((x)&(-(x)))
#define lson (ind<<1)
#define rson (ind<<1|1)
#define maxn 301000
#define INF 2100001000
#define mod 1000000007LL
using namespace std;
typedef long long LL;
struct LCT{
    int son[maxn][2],fa[maxn],bef[maxn];
    int key[maxn],add[maxn],maxr[maxn];
    bool lazy[maxn];
    void INIT(){
        rst(son,0); rst(fa,0);
        lazy[0] = lazy[1] = false;
        add[0] = add[1] = 0;
        bef[0] = bef[1] = 0;
        key[0] = maxr[0] = 0;
    }
    inline void update(int x){
        if(x){
            maxr[x] = MAX(maxr[son[x][0]],maxr[son[x][1]]);
            maxr[x] = MAX(maxr[x],key[x]);
        }
    }
    inline void INC(int x,int val){
        if(!x) return;
        key[x] += val;   add[x] += val;  maxr[x] += val;
    }
    inline void pushdown(int x){
        if(lazy[x]){
            lazy[x] = false;
            lazy[son[x][0]] ^= true;
            lazy[son[x][1]] ^= true;
            swap(son[x][0],son[x][1]);
        }
        if(add[x]){
            INC(son[x][0],add[x]);
            INC(son[x][1],add[x]);
            add[x] = 0;
        }
    }
    void rolate(int x,int kind){
        int y = fa[x], z = fa[y];
        pushdown(y); pushdown(x);
        son[y][!kind] = son[x][kind];
        if(son[x][kind])  fa[son[x][kind]] = y;
        son[x][kind] = y;
        if(z) son[z][son[z][1] == y] = x;
        fa[x] = z;  fa[y] = x;
        update(y); update(x);
    }
    void splay(int x){
        int rt = x;  for(; fa[rt]; rt = fa[rt])    ;
        if(rt != x){
            bef[x] = bef[rt];  bef[rt] = 0;
            while(fa[x]){
                pushdown(fa[x]);
                if(son[fa[x]][0] == x)
                    rolate(x,1);
                else
                    rolate(x,0);
            }
            update(x);
        }
        else pushdown(x);
    }
    void access(int x){                  //最重要的打通函数...
        int y = 0;
        for(; x; x = bef[x]){
            splay(x);
            fa[son[x][1]] = 0;
            bef[son[x][1]] = x;
            son[x][1] = y;
            fa[y] = x;
            bef[y] = 0;
            y = x;
            update(x);
        }
    }
    int getrt(int x){
        access(x);  splay(x);
        while(son[x][0]) x = son[x][0];
        return x;
    }
    void changert(int x){
        access(x); splay(x);
        lazy[x] ^= 1;
    }
    void cut(int x){
        access(x); splay(x);
        fa[son[x][0]] = 0;
        bef[son[x][0]] = bef[x];
        son[x][0] = 0; bef[x] = 0;
        update(x);
    }
    void link(int x,int y){
        changert(x);  changert(y);
        bef[x] = y;
    }
    int req(int x,int y){
        access(y);
        for(y = 0; x; x = bef[x]){
            splay(x);
            if(!bef[x]){
                int ans = MAX(maxr[son[x][1]],maxr[y]);
                return MAX(ans,key[x]);
            }
            fa[son[x][1]] = 0;
            bef[son[x][1]] = x;
            son[x][1] = y;
            fa[y] = x;
            bef[y] = 0;
            y = x;
            update(x);
        }
        return -1;
    }
    void change(int x,int y,int _v){
        access(y);
        for(y = 0; x; x = bef[x]){
            splay(x);
            if(!bef[x]){
                key[x] += _v; maxr[x] += _v;
                INC(son[x][1],_v);
                INC(y,_v);
                return;
            }
            fa[son[x][1]] = 0;
            bef[son[x][1]] = x;
            son[x][1] = y;
            fa[y] = x;
            bef[y] = 0;
            y = x;
            update(x);
        }
    }
}lct;
struct node{
    int t,nxt;
}edge[maxn<<1];
int headline[maxn],E,n;
bool visit[maxn];
void addedge(int f,int t){
    edge[E].t = t;
    edge[E].nxt = headline[f];
    headline[f] = E++;
}
void bfs(int x){
    queue<int> q;
    visit[x] = true;
    q.push(x);
    while(!q.empty()){
        int u = q.front(); q.pop();
        for(int i = headline[u];i != -1;i = edge[i].nxt){
            int v = edge[i].t;
            if(!visit[v]){
                visit[v] = true;
                lct.bef[v] = u;
                lct.add[v] = 0;
                lct.lazy[v] = false;
                q.push(v);
            }
        }
    }
}
void INIT(void){
    rst(headline,-1);
    rst(visit,false);
    E = 0;
    lct.INIT();
    FOR(i,1,n-1){
        int a,b; scanf("%d%d",&a,&b);
        addedge(a,b); addedge(b,a);
    }
    bfs(1);
    FOR(i,1,n){
        scanf("%d",&lct.key[i]);
    }
    int Q; scanf("%d",&Q);
    while(Q--){
        int op;
        scanf("%d",&op);
        if(op == 1){
            int a,b; scanf("%d%d",&a,&b);
            if(lct.getrt(a) == lct.getrt(b))
                puts("-1");
            else
                lct.link(a,b);
        }
        else if(op == 2){
            int a,b; scanf("%d%d",&a,&b);
            if(a == b || lct.getrt(a) != lct.getrt(b))
                puts("-1");
            else{
                lct.changert(a);
                lct.cut(b);
            }
        }
        else if(op == 3){
            int a,b,w; scanf("%d%d%d",&w,&a,&b);
            if(lct.getrt(a) != lct.getrt(b))
                puts("-1");
            else
                lct.change(a,b,w);                //顺序错了。。擦...
        }
        else{
            int a,b; scanf("%d%d",&a,&b);
            if(lct.getrt(a) != lct.getrt(b))
                puts("-1");
            else{
                printf("%d\n",lct.req(a,b));
            }
        }
    }
    printf("\n");
}
int main(void){
    while(EOF != scanf("%d",&n)){
        INIT();
    }return 0;
}
