#include <iostream>   //我是沙茶....今天又写搓了。。
#include <cstdio>     //这题的思想着重讲解一下。。因为如果开dp[a][t][c][g][st] 来表示状态的话。。其实是可以的。。只是有可能会超空间
#include <cstring>    //但是如果把atcg的个数给hash一下。。每次都增加一个字母。。然后从一个状态转移到另一个状态的话。。应该就可以了。。
#include <algorithm>  //hash方法为令_hash[k] = (s1+1)*(s2+1)*....(sk+1);  然后对于ai 有 n个的话那么就用st % _hash[i+1] / _hash[i] 就把n给取出来了。。
#include <queue>      //对于本题就是11*11*11*11*st = 11*11*11*11*500的复杂度。。
#include <climits>
#include <ctime>
#include <cmath>
#include <set>
#include <map>
#include <string>
#define MAX(a,b) ((a)>(b)?(a):(b))
#define MIN(a,b) ((a)<(b)?(a):(b))
#define abs(x) ((x)>0?(x):(-(x)))
#define FOR(i,a,b) for(int i = (a);i<=(b);i++)
#define FORD(i,a,b) for(int i = (a);i>=(b);i--)
#define REP(i,n) for(int i = 0;i<(n);i++)
#define rst(x,k) memset(x,k,sizeof(x))
#define lowbit(x) ((x)&(-(x)))
#define h(x) (1<<(x))
#define lson (ind<<1)
#define rson (ind<<1|1)
#define eps 1e-6
#define INF 1000000000
#define maxn 1010000
using namespace std;
typedef long long LL;
int n,iCase,tot;
struct node{
    int fail,cnt;
    int nxt[4];
    void INIT(void){
        fail = cnt = 0;
        rst(nxt,0);
    }
}tree[510];
int _hash[5];
inline int GET(char c){
    if(c == 'A')return 0;
    else if(c == 'T')return 1;
    else if(c == 'C')return 2;
    return 3;
}
void Insert(char *s){
    int now = 0;
    for(;*s;s++){
        int c = GET(*s);
        if(tree[now].nxt[c] == 0){
            tot++; tree[tot].INIT();
            tree[now].nxt[c] = tot;
        }
        now = tree[now].nxt[c];
    }
    tree[now].cnt++;
}
void bfs(void){
    int now = 0;
    queue<int> q; q.push(0);
    while(!q.empty()){
        now = q.front(); q.pop();
        REP(i,4){
            if(tree[now].nxt[i]){
                int temp = tree[now].nxt[i];
                if(now){
                    tree[temp].fail = tree[tree[now].fail].nxt[i];
                }
                tree[temp].cnt += tree[tree[temp].fail].cnt;
                q.push(temp);
            }else tree[now].nxt[i] = tree[tree[now].fail].nxt[i];
        }
    }
}
char s[50];
bool visit[15000];
int sum[5],dp[15000][510];
void solve(void){
    tot = 0; tree[0].INIT();
    REP(i,n){
        scanf("%s",s);
        Insert(s);
    }
    bfs();
    rst(visit,false);
    rst(sum,0);
    rst(dp,-1);
    dp[0][0] = 0;
    scanf("%s",s);
    for(int i = 0;s[i];i++){
        sum[GET(s[i])]++;
    }
    //FOR(i,0,3)printf("%d  ",sum[i]);printf("\n");
    _hash[0] = 1;
    FOR(i,1,4){
        _hash[i] = _hash[i-1] * (sum[i-1] + 1);
    }
    queue<int> q; q.push(0); visit[0] = true;
    int now = 0, ans = 0;
    while(!q.empty()){
        now = q.front(); q.pop();
        FOR(i,0,tot){
            if(dp[now][i] < 0)continue;
            REP(j,4){
                int temp = now % _hash[j+1] / _hash[j];
                if(temp + 1 > sum[j])continue;
                temp = now + _hash[j];
                int pp = tree[i].nxt[j];
                if(dp[temp][pp] < dp[now][i] + tree[pp].cnt){
                    dp[temp][pp] = dp[now][i] + tree[pp].cnt;
                    ans = MAX(ans,dp[temp][pp]);
                }
                if(!visit[temp]){
                    visit[temp] = true;
                    q.push(temp);
                }
            }
        }
    }
    printf("Case %d: %d\n",++iCase,ans);
}
int main(void){
    iCase = 0;
    while(EOF != scanf("%d",&n) && n)solve();
    return 0;
}
