#include <iostream>   //我是沙茶....今天又写搓了。。
#include <cstdio>     //先把自动机给做好。。然后dp[i][j]表示的是i长度的串以k结尾时的最小改变量。。然后不断从dp[i-1][st]往后面枚举即可。。
#include <cstring>
#include <algorithm>
#include <queue>
#include <climits>
#include <ctime>
#include <cmath>
#include <set>
#include <map>
#include <string>
#define MAX(a,b) ((a)>(b)?(a):(b))
#define MIN(a,b) ((a)<(b)?(a):(b))
#define abs(x) ((x)>0?(x):(-(x)))
#define FOR(i,a,b) for(int i = (a);i<=(b);i++)
#define FORD(i,a,b) for(int i = (a);i>=(b);i--)
#define REP(i,n) for(int i = 0;i<(n);i++)
#define rst(x,k) memset(x,k,sizeof(x))
#define lowbit(x) ((x)&(-(x)))
#define h(x) (1<<(x))
#define lson (ind<<1)
#define rson (ind<<1|1)
#define eps 1e-6
#define INF 1000000000
#define maxn 1010000
using namespace std;
typedef long long LL;
struct node{
    int fail,nxt[4];
    bool end;
    void INIT(void){
        fail = end = 0;
        rst(nxt,0);
    }
}tree[1010];
int tot,n,iCase;
inline int GET(char c){
    if(c == 'A')return 0;
    else if(c == 'T')return 1;
    else if(c == 'C')return 2;
    return 3;
}
void Insert(char *s){
    int now = 0;
    for(;*s;s++){
        int c = GET(*s);
        if(tree[now].nxt[c] == 0){
            tot++; tree[tot].INIT();
            tree[now].nxt[c] = tot;
        }
        now = tree[now].nxt[c];
    }
    tree[now].end = true;
}
void bfs(void){
    int now = 0;
    queue<int> q; q.push(0);
    while(!q.empty()){
        now = q.front() ;q.pop();
        REP(i,4){
            if(tree[now].nxt[i]){
                int temp = tree[now].nxt[i];
                if(now)tree[temp].fail = tree[tree[now].fail].nxt[i];
                q.push(temp);
                tree[temp].end |= tree[tree[temp].fail].end;
            }else tree[now].nxt[i] = tree[tree[now].fail].nxt[i];
        }
    }
}
char s[1010];
int dp[1010][1010];
void Match(void){
    int len = strlen(s+1);
    //printf("len is %d\n",len);
    FOR(i,0,len){
        FOR(j,0,tot){
            dp[i][j] = INF;
        }
    }
    dp[0][0] = 0;
    FOR(i,1,len){
        int c = GET(s[i]);
        FOR(j,0,tot){
            if(tree[j].end || dp[i-1][j] >= INF)continue;
            REP(p,4){
                int temp = tree[j].nxt[p];
                if(tree[temp].end)continue;
                dp[i][temp] = MIN(dp[i][temp],dp[i-1][j] + (c != p));
            }
        }
    }
    int ans = INF;
    FOR(i,0,tot){
        ans = MIN(ans,dp[len][i]);
    }
    printf("Case %d: ",++iCase);
    if(ans < INF)printf("%d\n",ans);
    else printf("-1\n");
}
void solve(void){
    tot = 0; tree[0].INIT();
    REP(i,n){
        scanf("%s",s);
        Insert(s);
    }
    bfs();
    scanf("%s",s+1);
    Match();
}
int main(void){
    iCase = 0;
    while(EOF != scanf("%d",&n) && n)solve();
    return 0;
}
