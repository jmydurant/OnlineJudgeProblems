#include <iostream>   //我是沙茶....今天又写搓了。。
#include <fstream>    //因为bob会先出。。所以alice就少了一种可能性。。这样虽然是石头剪刀布游戏。。还是可以2SAT判断胜利可行性的。。
#include <cstdio>     //用一个数组记录alice的可行状态就ok了。。 
#include <cstring>    //码农题1A还是很开心的。。
#include <algorithm>
#include <queue>
#include <stack>
#include <climits>
#include <ctime>
#include <cmath>
#include <set>
#include <map>
#include <string>
#include <vector>
#include <list>
#include <utility>
#define MAX(a,b) ((a)>(b)?(a):(b))
#define MIN(a,b) ((a)<(b)?(a):(b))
#define abs(x) ((x)>0?(x):(-(x)))
#define FOR(i,a,b) for(int i = (a);i<=(b);i++)
#define FORD(i,a,b) for(int i = (a);i>=(b);i--)
#define REP(i,n) for(int i = 0;i<(n);i++)
#define rst(x,k) memset(x,k,sizeof(x))
#define lowbit(x) ((x)&(-(x)))
#define h(x) (1<<(x))
//#define lson (ind<<1)
//#define rson (ind<<1|1)
#define eps 1e-3
#define INF 50000000
#define maxn 21000
#define mod 1000000007LL
#define Pi acos(-1.0)
#define link fjksldfjaslkdfjas
using namespace std;
typedef long long LL;
struct node{
    int t,nxt;
}edge[1010100];
int headline[maxn] , E;
inline void add(int f,int t){
    edge[E].t = t;
    edge[E].nxt = headline[f];
    headline[f] = E++;
}
int iCase , n , m;
int fuck[maxn][3];
int dfn[maxn] , low[maxn] , tot , st[maxn << 2] , top , belong[maxn] , scc;
bool instack[maxn];
void tarjan(int u){
    dfn[u] = low[u] = ++tot;
    instack[u] = true;
    st[top] = u; top++;
    for(int i = headline[u];~i;i = edge[i].nxt){
        int v = edge[i].t;
        if(!dfn[v]){
            tarjan(v);
            low[u] = MIN(low[u] , low[v]);
        }else if(instack[v]) low[u] = MIN(low[u] , dfn[v]);
    }
    if(dfn[u] == low[u]){
        scc++;
        while(true){
            top--;
            int j = st[top];
            instack[j] = false;
            belong[j] = scc;
            if(j == u)break;
        }
    }
}
bool judge(void){
    rst(dfn,0); rst(instack,false);
    tot = top = scc = 0;
    FOR(i,0,2*n-1)if(!dfn[i])tarjan(i);
    FOR(i,0,2*n-1)if(belong[i] == belong[i ^ 1])return false;
    return true;
}
void solve(void){
    scanf("%d%d",&n,&m);
    rst(fuck,-1);
    rst(headline,-1); E = 0;
    int kill_la_kill = 0;
    REP(i,n){
        int cc; scanf("%d",&cc);
        cc--; cc = (cc + 2) % 3;
        REP(j,3){
            if(j == cc)continue;
            fuck[i+1][j] = kill_la_kill++ ;
        }
    }
    bool through = true;
    REP(i,m){
        int a,b,k; scanf("%d%d%d",&a,&b,&k);
        if(!through)continue;
        if(k == 0){
            bool flag = false;
            REP(j,3){
                if(fuck[a][j] != -1 && fuck[b][j] != -1){
                    flag = true;
                    add(fuck[a][j] , fuck[b][j]);
                    add(fuck[b][j] , fuck[a][j]);
                }else if(fuck[a][j] != -1){
                    add(fuck[a][j] , fuck[a][j] ^ 1);
                }else if(fuck[b][j] != -1){
                    add(fuck[b][j] , fuck[b][j] ^ 1);
                }
            }
            if(!flag)through = false;
        }else{
            REP(j,3){
                if(fuck[a][j] != -1){
                    if(fuck[b][j] != -1){
                        add(fuck[a][j] , fuck[b][j] ^ 1);
                        add(fuck[b][j] , fuck[a][j] ^ 1);
                    }
                }
            }
        }
    }
    printf("Case #%d: ",++iCase);
    if(!through){
        printf("no\n");
        return;
    }
    if(judge())printf("yes\n");
    else printf("no\n");
}
int main(void){
    iCase = 0;
    int casenum; scanf("%d",&casenum);
    while(casenum--) solve();
    return 0;
}
