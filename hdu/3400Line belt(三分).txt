#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <queue>
#include <climits>
#include <ctime>
#include <cmath>
#define MAX(a,b) ((a)>(b)?(a):(b))
#define MIN(a,b) ((a)<(b)?(a):(b))
#define abs(x) (x)>0?(x):(-(x))
#define FOR(i,a,b) for(int i = (a);i<=(b);i++)
#define REP(i,n) for(int i = 0;i<(n);i++)
#define rst(x,k) memset(x,k,sizeof(x))
#define lson (ind<<1)
#define rson (ind<<1|1)
#define INF 1000000001
#define maxn 1010000
#define h(x) (1<<(x))
#define eps 1e-9
using namespace std;
typedef long long LL;
struct node
{
    double x,y;
    node (double s_x = 0,double s_y = 0){x = s_x; y = s_y;}
    node operator + (const node &temp)
    {
        return node(x+temp.x,y+temp.y);
    }
    node operator - (const node &temp)
    {
        return node(x-temp.x,y-temp.y);
    }
    node operator * (const int a)
    {
        return node(a*x,a*x);
    }
    node operator / (const int a)
    {
        return node(x/a,y/a);
    }
}A,B,C,D;
double v1,v2,v3;
double dis(node &a,node &b)
{
    node deta = a-b;
    return sqrt(deta.x*deta.x+deta.y*deta.y);
}
bool zero(double x)
{
    if(abs(x)<eps)
        return true;
    return false;
}
double find_F(node &E)
{
    node l = C;
    node r = D;
    double ans;
    while(dis(l,r)>eps)
    {
        node deta = (r-l)/3;
        node pl = l+deta;
        node pr = r-deta;
        double disl = (dis(A,E)/v1+dis(E,pl)/v3+dis(pl,D)/v2);
        double disr = (dis(A,E)/v1+dis(E,pr)/v3+dis(pr,D)/v2);
        if(disl>disr)
        {
            ans = disr;
            l = pl;
        }
        else
        {
            ans = disl;
            r = pr;
        }
    }
    if(dis(C,D)<eps)
        return (dis(A,E)/v1+dis(E,D)/v3);
    return ans;
}

double find_E(void)
{
    node l = A;
    node r = B;
    double ans;
    while(dis(l,r)>eps)
    {
        node deta = (r-l)/3;
        node pl = l+deta;
        node pr = r-deta;
        double disl = find_F(pl);
        double disr = find_F(pr);
        if(disl>disr)
        {
            ans = disr;
            l = pl;
        }
        else
        {
            ans = disl;
            r = pr;
        }
    }
    if(dis(A,B)<eps)
        return find_F(A);
    return ans;
}
int main(void)
{
    int casenum; cin >> casenum;
    while(casenum--)
    {
        cin >> A.x >> A.y >> B.x >> B.y >> C.x >> C.y >> D.x >> D.y;
        cin >> v1 >> v2 >> v3;
        printf("%.2lf\n",find_E());
    }
    return 0;
}
